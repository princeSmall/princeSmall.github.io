<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乐乐</title>
  <subtitle>Tong</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-02T08:44:17.674Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>TongLe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[iOS_测试]</title>
    <link href="http://yoursite.com/2018/04/02/iOS-%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/04/02/iOS-测试/</id>
    <published>2018-04-02T08:44:17.000Z</published>
    <updated>2018-04-02T08:44:17.674Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[Python_scrapy图片爬取下载]</title>
    <link href="http://yoursite.com/2017/12/20/Python-scrapy%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2017/12/20/Python-scrapy图片爬取下载/</id>
    <published>2017-12-20T01:53:34.000Z</published>
    <updated>2017-12-20T01:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>welcome to myblog</p>
<p><a href="https://github.com/princeSmall/Python_Get-Car-Photo" target="_blank" rel="noopener">Dome地址</a></p>
<h3 id="爬取某个车站的图片"><a href="#爬取某个车站的图片" class="headerlink" title="爬取某个车站的图片"></a>爬取某个车站的图片</h3><p><img src="/2017/12/20/Python-scrapy图片爬取下载/thumbs.png" alt=""><br><img src="/2017/12/20/Python-scrapy图片爬取下载/full.png" alt=""></p>
<h4 id="item-py-中"><a href="#item-py-中" class="headerlink" title="item.py 中"></a>item.py 中</h4><p>1、申明item 的fields</p>
<pre><code>class PhotoItem(scrapy.Item):
     # define the fields for your item here like:
     # name = scrapy.Field()
     image_urls = scrapy.Field()
     images = scrapy.Field()
     pass
</code></pre><h4 id="spider-的image-py"><a href="#spider-的image-py" class="headerlink" title="spider 的image.py"></a>spider 的image.py</h4><ol>
<li><p>导入头文件</p>
<pre><code>from Photo.items import PhotoItem

from scrapy import Spider

from scrapy import Selector

from scrapy.http import Request
</code></pre></li>
<li><p>爬取代码</p>
</li>
</ol>
<p>注：</p>
<p>只需要爬取图片对应的url</p>
<p>翻页爬取时加上爬取范围url</p>
<pre><code>class imageSpider(Spider):
      name = &apos;car&apos;
      allowed_domains = [&apos;car.autohome.com.cn&apos;]
      start_urls = [
          &quot;https://car.autohome.com.cn/jingxuan/list-0-p1.html&quot;,
      ]

def parse(self, response):
    item = PhotoItem()
    sel = Selector(response)
    item[&apos;image_urls&apos;] = sel.xpath(&apos;//ul[@class=&quot;content&quot;]/li/a/img/@src&apos;).extract()

    print item[&apos;image_urls&apos;], &apos;..image_urls..&apos;
    yield item

    # 翻页
    new_urls = response.xpath(&apos;//div[@class=&quot;pageindex&quot;]/a[9]/@href&apos;).extract_first()

    new_url = &quot;https://car.autohome.com.cn&quot; + new_urls

    print new_url, &apos;..new_url...&apos;
    if new_url:

       yield Request(new_url, callback=self.parse)        
</code></pre><h4 id="settings-py-中"><a href="#settings-py-中" class="headerlink" title="settings.py 中"></a>settings.py 中</h4><h6 id="Configure-item-pipelines"><a href="#Configure-item-pipelines" class="headerlink" title="Configure item pipelines"></a>Configure item pipelines</h6><pre><code>ITEM_PIPELINES = {
    &apos;Photo.pipelines.jandanPipeline&apos;: 200,
    # &apos;Photo.pipelines.PhotoPipeline&apos;: 300,
 }
</code></pre><h5 id="存储下载图片所在位置"><a href="#存储下载图片所在位置" class="headerlink" title="存储下载图片所在位置"></a>存储下载图片所在位置</h5><pre><code>IMAGES_STORE = &apos;/Users/sansi/Desktop/Scrapy/Photo/Image&apos;
DOWNLOAD_DELAY = 0.25
</code></pre><h5 id="缩略图大小"><a href="#缩略图大小" class="headerlink" title="缩略图大小"></a>缩略图大小</h5><pre><code>IMAGES_THUMBS = {
   &apos;small&apos;: (50, 50),
   &apos;big&apos;: (200, 200),
}
</code></pre><h5 id="图片的失效期限"><a href="#图片的失效期限" class="headerlink" title="图片的失效期限"></a>图片的失效期限</h5><pre><code>IMAGES_EXPIRES = 90           
</code></pre><h4 id="pipelines-py-中"><a href="#pipelines-py-中" class="headerlink" title="pipelines.py 中"></a>pipelines.py 中</h4><ol>
<li><p>导入头文件</p>
<pre><code>import os
import urllib
import scrapy
from scrapy.exceptions import DropItem
from scrapy.pipelines.images import ImagesPipeline
from Photo import settings        
</code></pre></li>
<li><p>编写爬取下载</p>
<pre>
class PhotoPipeline(object):
 def process_item(self, item, spider):
     return item
     </pre>

</li>
</ol>
<h5 id="重写ImagesPipeline，对各个url返回Request"><a href="#重写ImagesPipeline，对各个url返回Request" class="headerlink" title="重写ImagesPipeline，对各个url返回Request"></a>重写ImagesPipeline，对各个url返回Request</h5><pre>
class jandanPipeline(ImagesPipeline):
    def get_media_requests(self, item, info):
        for image_url in item['image_urls']:
            yield scrapy.Request(image_url)

</pre>

<h5 id="当一个项目所有的请求完成时调用"><a href="#当一个项目所有的请求完成时调用" class="headerlink" title="当一个项目所有的请求完成时调用"></a>当一个项目所有的请求完成时调用</h5><pre><code>def item_completed(self, results, item, info):
    image_paths = [x[&apos;path&apos;] for ok, x in results if ok]
    if not image_paths:
        raise DropItem(&quot;Item contains no images&quot;)
    item[&apos;images&apos;] = image_paths
    return item          
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;welcome to myblog&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/princeSmall/Python_Get-Car-Photo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dome地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="8" scheme="http://yoursite.com/tags/8/"/>
    
  </entry>
  
  <entry>
    <title>图片爬取下载]</title>
    <link href="http://yoursite.com/2017/12/20/%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2017/12/20/图片爬取下载/</id>
    <published>2017-12-20T01:51:46.000Z</published>
    <updated>2017-12-20T01:51:46.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[Python_scrapy多数据及数据库存储]</title>
    <link href="http://yoursite.com/2017/12/19/Python-scrapy%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2017/12/19/Python-scrapy多数据及数据库存储/</id>
    <published>2017-12-19T14:28:48.000Z</published>
    <updated>2017-12-20T01:57:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>welcome to myblog</p>
<p><a href="https://github.com/princeSmall/Python_Get-douban-s-Movies-Infromation" target="_blank" rel="noopener">Dome地址</a></p>
<h1 id="Spiders"><a href="#Spiders" class="headerlink" title="Spiders"></a>Spiders</h1><p>使用scrapy的spiders进行多网页爬取保存到本地<br><img src="/2017/12/19/Python-scrapy多数据及数据库存储/mysql.png" alt="mysql"></p>
<h3 id="Princesmall-py中-导入头文件"><a href="#Princesmall-py中-导入头文件" class="headerlink" title="Princesmall.py中 导入头文件"></a>Princesmall.py中 导入头文件</h3><p>注意：..items</p>
<pre><code>from scrapy.spiders import Spider
from scrapy.selector import Selector
from scrapy.http import Request
import scrapy
from ..items import PrincesmallItem
</code></pre><h4 id="获取princesmall的所有title，link，time"><a href="#获取princesmall的所有title，link，time" class="headerlink" title="获取princesmall的所有title，link，time"></a>获取princesmall的所有title，link，time</h4><p>注意：要用yield item。要用yield item。要用yield item。重要说三遍</p>
<pre><code>class princesmallSpider(Spider):
      name = &quot;princesmall&quot;

      download_delay = 1

      allowed_domains = [&quot;princesmall.cn&quot;]
     start_urls = [
    &quot;http://princesmall.cn&quot;
      ]

def parse(self, response):
    sel = Selector(response)
    sites = sel.xpath(&apos;//header[@class=&quot;post-header&quot;]&apos;)

    for site in sites:
        item = PrincesmallItem()
        title = site.xpath(&apos;h1/a/text()&apos;).extract()
        link = site.xpath(&apos;h1/a/@href&apos;).extract()
        time = site.xpath(&apos;div/span/time/text()&apos;).extract()
        item[&apos;title&apos;] = [t.encode(&apos;utf-8&apos;) for t in title]
        item[&apos;link&apos;] = [l.encode(&apos;utf-8&apos;) for l in link]
        item[&apos;time&apos;] = [m.encode(&apos;utf-8&apos;) for m in time]
        yield item

    # title_prince = sel.xpath(&apos;//header[@class=&quot;post-header&quot;]/h1/a/text()&apos;).extract()
    # url_prince = sel.xpath(&apos;//header[@class=&quot;post-header&quot;]/h1/a/@href&apos;).extract()
    # time_prince = sel.xpath(&apos;//header[@class=&quot;post-header&quot;]/div/span/time/text()&apos;).extract()
    #
    # item[&apos;title&apos;] = [t.encode(&apos;utf-8&apos;) for t in title_prince]
    # item[&apos;link&apos;] = [l.encode(&apos;utf-8&apos;) for l in url_prince]
    # item[&apos;time&apos;] = [m.encode(&apos;utf-8&apos;) for m in time_prince]
    #
    # yield item

    print
    item, &apos;------&apos;
    # 爬取下一页
    urls = sel.xpath(&apos;//nav[@class=&quot;pagination&quot;]/a[@class=&quot;extend next&quot;]/@href&apos;).extract()
    for url in urls:
        url = &quot;http://princesmall.cn&quot; + url
        yield Request(url, callback=self.parse)


        # yield scrapy.Request(url,callback=self.parse)
</code></pre><h4 id="获取w3cshoolxml的title，link，desc"><a href="#获取w3cshoolxml的title，link，desc" class="headerlink" title="获取w3cshoolxml的title，link，desc"></a>获取w3cshoolxml的title，link，desc</h4><pre><code> class w3schoolSpider(Spider):
       name = &quot;w3school&quot;
       allowed_domains = [&quot;w3school.com.cn&quot;]
       start_urls = [
    &quot;http://www.w3school.com.cn/xml/xml_syntax.asp&quot;
      ]

def parse(self, response):
    sel = Selector(response)
    sites = sel.xpath(&apos;//div[@id=&quot;navsecond&quot;]/div[@id=&quot;course&quot;]/ul[1]/li&apos;)
    items = []

    for site in sites:
        item = PrincesmallItem()

        title = site.xpath(&apos;a/text()&apos;).extract()
        link = site.xpath(&apos;a/@href&apos;).extract()
        desc = site.xpath(&apos;a/@title&apos;).extract()

        item[&apos;title&apos;] = [t.encode(&apos;utf-8&apos;) for t in title]
        item[&apos;link&apos;] = [l.encode(&apos;utf-8&apos;) for l in link]
        item[&apos;desc&apos;] = [d.encode(&apos;utf-8&apos;) for d in desc]
        items.append(item)

    return items
</code></pre><h3 id="pipelines-py"><a href="#pipelines-py" class="headerlink" title="pipelines.py"></a>pipelines.py</h3><p>注意：保存到本地，text，json，xml…有时候用ensure_ascii = False.有时候要用decode(“unicode_escape”).初学者还没分清区别</p>
<pre><code>import codecs
import json

class PrincesmallPipeline(object):
      def __init__(self):
          self.file = codecs.open(&apos;prince.json&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)
        # self.file = codecs.open(&apos;princesmall.json&apos;,&apos;wb&apos;,encoding=&apos;utf-8&apos;)
        # self.file = codecs.open(&apos;w3school_data_utf8.json&apos;, &apos;wb&apos;, encoding=&apos;utf-8&apos;)

def process_item(self, item, spider):
    # line = json.dumps(dict(item), ensure_ascii=False) + &apos;\n&apos;
    # self.file.write(line)
    line = json.dumps(dict(item)) + &apos;\n&apos;
    self.file.write(line.decode(&quot;unicode_escape&quot;))
    return item
</code></pre><h3 id="items-py-中仍然不变"><a href="#items-py-中仍然不变" class="headerlink" title="items.py 中仍然不变"></a>items.py 中仍然不变</h3><pre><code>import scrapy
from scrapy.item import Item, Field


 class PrincesmallItem(scrapy.Item):
   # define the fields for your item here like:
   # name = scrapy.Field()
     title = Field()
     link = Field()
     desc = Field()
     time = Field()

     pass
</code></pre><h3 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载MySQL</h3><p>Mac ：</p>
<p>官网下载dmg文件打开</p>
<p>homebrew下载,Mac 个人倾向这个下载，不然会出现各种各样的环境问题，反正我是处理了好多问题。最后用pip install mysql 根本不用考虑环境问题，一步到位。。。。</p>
<h4 id="pipelines-py-1"><a href="#pipelines-py-1" class="headerlink" title="pipelines.py"></a>pipelines.py</h4><p>导入头文件：</p>
<pre><code>from twisted.enterprise import adbapi
import MySQLdb
from MySQLdb import cursors
from scrapy import log
</code></pre><p>类方法</p>
<pre><code>class PrincesmallSQLPipeline(object):

def __init__(self):
    self.dbpool = adbapi.ConnectionPool(&quot;MySQLdb&quot;,

                                        host = &quot;localhost&quot;,
                                        db = &quot;new_schema_prince&quot;,
                                        user = &quot;root&quot;,
                                        passwd = &quot;princesmall&quot;,
                                        cursorclass = MySQLdb.cursors.DictCursor,
                                        charset = &quot;utf8&quot;,
                                        use_unicode =True
                                        )
def process_item(self,item,spider):

    query = self.dbpool.runInteraction(self._conditional_insert,item)
    query.addErrback(self.handle_error)
    return item
def _conditional_insert(self,tb,item):
    prince_title = item[&apos;title&apos;]
    prince_link = item[&apos;link&apos;]
    prince_time = item[&apos;time&apos;]
    # print prince_link, prince_title, prince_time, &apos;--------&apos;

    # 删除所有数据
    # tb.execute(&quot;DELETE FROM TABLE_NAME &quot;)

    # 插入数据，prince_link[0]取出list列表中的数据
    tb.execute(&quot;INSERT INTO  TABLE_NAME (Prince_Title, Prince_Link, Prince_Time) VALUES (&apos;%s&apos;, &apos;%s&apos;, &apos;%s&apos;)&quot; % (prince_title[0], prince_link[0], prince_time[0]))

    log.msg(&quot;item data in :%s&quot; % item, level=log.DEBUG)
def handle_error(self,e):
    log.err(e)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;welcome to myblog&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/princeSmall/Python_Get-douban-s-Movies-Infromation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;D
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="8" scheme="http://yoursite.com/tags/8/"/>
    
  </entry>
  
  <entry>
    <title>[DuerOS_小度]</title>
    <link href="http://yoursite.com/2017/12/05/DuerOS-%E5%B0%8F%E5%BA%A6/"/>
    <id>http://yoursite.com/2017/12/05/DuerOS-小度/</id>
    <published>2017-12-05T12:10:49.000Z</published>
    <updated>2017-12-05T12:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>智能家居方向，DuerHomeSDK研究及开发</p>
<h2 id="DuerHomeSDK具备的功能"><a href="#DuerHomeSDK具备的功能" class="headerlink" title="DuerHomeSDK具备的功能"></a>DuerHomeSDK具备的功能</h2><h4 id="BDuerAbility-h"><a href="#BDuerAbility-h" class="headerlink" title="BDuerAbility.h"></a>BDuerAbility.h</h4><p>获取各能力状态，如播放器状态，扬声器状态等，由各子类分别调用</p>
<h4 id="BDuerAlerts-h"><a href="#BDuerAlerts-h" class="headerlink" title="BDuerAlerts.h"></a>BDuerAlerts.h</h4><p>提醒事件</p>
<ul>
<li>设置成功（SetAlertSucceeded）、</li>
<li>设置失败（SetAlertFailed）、</li>
<li>删除成功（DeleteAlertSucceeded）、</li>
<li>删除失败（DeleteAlertFailed）、</li>
<li>响铃开始（AlertStarted）、</li>
<li>响铃结束（AlertStopped）、</li>
<li>响铃打断其他事件（AlertEnteredForeground）、</li>
<li>响铃事件被打断（AlertEnteredBackground）</li>
</ul>
<ol>
<li>提醒ID</li>
<li>提醒类型type</li>
<li>提醒时间scheduledTime</li>
<li>是否正在提醒isActive</li>
</ol>
<h4 id="BDuerAudioPlayer-h"><a href="#BDuerAudioPlayer-h" class="headerlink" title="BDuerAudioPlayer.h"></a>BDuerAudioPlayer.h</h4><ol>
<li>获取播放器状态</li>
<li>播放指定音频</li>
<li><p>音箱状态事件</p>
<ul>
<li>开始（PlaybackStarted）、</li>
<li>完成（PlaybackFinished）、</li>
<li>失败（PlaybackFailed）、</li>
<li>停止（PlaybackStopped）、</li>
<li>暂停（PlaybackPaused）、</li>
<li>恢复（PlaybackResumed）、</li>
<li>状态（PlaybackState）、</li>
<li>进度上报（ProgressReportIntervalElapsed）</li>
</ul>
</li>
</ol>
<h4 id="BDuerAuthentication-H"><a href="#BDuerAuthentication-H" class="headerlink" title="BDuerAuthentication.H"></a>BDuerAuthentication.H</h4><ol>
<li>对设备做授权配对操作</li>
<li>百度账号登录，第三方登录等</li>
<li>登录信息获取</li>
</ol>
<h4 id="BDuerBLEDevice-H"><a href="#BDuerBLEDevice-H" class="headerlink" title="BDuerBLEDevice.H"></a>BDuerBLEDevice.H</h4><ol>
<li>BLE设备</li>
</ol>
<h4 id="BDuerBTDiscoverService-h"><a href="#BDuerBTDiscoverService-h" class="headerlink" title="BDuerBTDiscoverService.h"></a>BDuerBTDiscoverService.h</h4><ol>
<li>发现待配网的DuserBTD设备</li>
<li>开始扫描</li>
<li>停止扫描</li>
</ol>
<h4 id="BDuerDevice-h"><a href="#BDuerDevice-h" class="headerlink" title="BDuerDevice.h"></a>BDuerDevice.h</h4><ol>
<li>设备传给app的数据</li>
</ol>
<table>
<thead>
<tr>
<th>类名</th>
<th>获取的信息</th>
</tr>
</thead>
<tbody>
<tr>
<td> BDuerAudioPlayer * audioPlayer;</td>
<td>//播放器</td>
</tr>
<tr>
<td> BDuerSpeaker * speaker;</td>
<td>//扬声器</td>
</tr>
<tr>
<td> BDuerAlerts * alerts;</td>
<td>//提醒</td>
</tr>
<tr>
<td> BDuerSystemInfo * systemInfo;</td>
<td>//硬件设备属性</td>
</tr>
<tr>
<td> BDuerScreenMsg * screenMsg;</td>
<td>//绘制界面</td>
</tr>
<tr>
<td>BDuerLocation * location;</td>
<td>//地理位置</td>
</tr>
<tr>
<td>BDuerAuthentication * authentication;</td>
<td>//设备授权</td>
</tr>
<tr>
<td>BDuerTVLink * tvLink;</td>
<td>//音箱连接电视</td>
</tr>
<tr>
<td>BDuerTTSInfo * ttsInfo;</td>
<td>//修改设备tts播报的音色</td>
</tr>
<tr>
<td>BDuerPlaybackController * playbackController;</td>
<td>//简单播放控制</td>
</tr>
</tbody>
</table>
<h4 id="BDuerDeviceDiscoverService-h"><a href="#BDuerDeviceDiscoverService-h" class="headerlink" title="BDuerDeviceDiscoverService.h"></a>BDuerDeviceDiscoverService.h</h4><ol>
<li>发现已配好网的DuserOS设备（同一局域网线）</li>
<li>开始发现</li>
<li>停止发现</li>
</ol>
<h4 id="BDuerDeviceListenService-h"><a href="#BDuerDeviceListenService-h" class="headerlink" title="BDuerDeviceListenService.h"></a>BDuerDeviceListenService.h</h4><ol>
<li>DuserOS设备上线后，会通知SDK，SDK会将监听到的该设备抛出</li>
<li>开始监听</li>
<li>停止监听</li>
</ol>
<h4 id="BDuerErrorCodes-h"><a href="#BDuerErrorCodes-h" class="headerlink" title="BDuerErrorCodes.h"></a>BDuerErrorCodes.h</h4><ol>
<li>错误数据码</li>
</ol>
<table>
<thead>
<tr>
<th>错误码</th>
<th>错误信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>    BDuerBLEConnectionFail              = 1001,</td>
<td>// 蓝牙连接失败</td>
</tr>
<tr>
<td>    BDuerAPConnectionFail               = 1002,</td>
<td>// AP连接失败</td>
</tr>
<tr>
<td>    BDuerNetDataExchangeFail            = 1003,</td>
<td>// 配网数据交换失败</td>
</tr>
<tr>
<td>    BDuerDuerDeviceDiscoverFail         = 1004,</td>
<td>// 未发现小度之家设备</td>
</tr>
<tr>
<td>    BDuerParamError                     = 1008,</td>
<td>// 参数缺失</td>
</tr>
<tr>
<td>    BDuerVersionNotSupportError         = 1009,</td>
<td>// 版本不支持</td>
</tr>
<tr>
<td>    BDuerUnDefinedError                 = 1010,</td>
<td>// 未定义错误，详细错误请见error的description</td>
</tr>
<tr>
<td>    BDuerDuerDeviceListenFail           = 1011,</td>
<td>// 监听失败</td>
</tr>
</tbody>
</table>
<h4 id="BDuserHomeSDKInterface-h"><a href="#BDuserHomeSDKInterface-h" class="headerlink" title="BDuserHomeSDKInterface.h"></a>BDuserHomeSDKInterface.h</h4><ol>
<li><p>与设备无关的属性</p>
<ul>
<li>BDuerBTDiscoverService * btDiscoverService;//蓝牙发现，发现多台蓝牙设备</li>
<li>BDuerDeviceDiscoverService * deviceDiscoverService;//局域网发现，发现多台DuerOS设备</li>
<li>BDuerDeviceListenService * deviceListenService;//局域网监听，设备上线会通知外部</li>
<li>BDuerNetConfigure * netConfigure;//配网</li>
<li>BDuerLogin * login;//用户登录信息，跳转登录页等</li>
</ul>
</li>
<li><p>厂商指定的设备列表</p>
<ul>
<li>添加授权</li>
<li>解除授权</li>
</ul>
</li>
</ol>
<h4 id="BDuerLocation-H"><a href="#BDuerLocation-H" class="headerlink" title="BDuerLocation.H"></a>BDuerLocation.H</h4><ol>
<li>获取地理位置</li>
<li>设置地理位置</li>
</ol>
<h4 id="BDuerLogin-H"><a href="#BDuerLogin-H" class="headerlink" title="BDuerLogin.H"></a>BDuerLogin.H</h4><ol>
<li>用户登录</li>
<li>多用户登录，切换</li>
<li>退出登录</li>
<li>获取登录信息</li>
</ol>
<h4 id="BDuerNetConfigure-H"><a href="#BDuerNetConfigure-H" class="headerlink" title="BDuerNetConfigure.H"></a>BDuerNetConfigure.H</h4><ol>
<li>配网类（蓝牙和渡鸦科技））</li>
</ol>
<h4 id="BDuerPlaybackController-H"><a href="#BDuerPlaybackController-H" class="headerlink" title="BDuerPlaybackController.H"></a>BDuerPlaybackController.H</h4><ol>
<li><p>设备控制指令</p>
<ul>
<li>PlayCommandIssued（播放）、</li>
<li>PauseCommandIssued（暂停）、</li>
<li>NextCommandIssued（下一首）、</li>
<li>PreviousCommandIssued（上一首）</li>
</ul>
</li>
</ol>
<h4 id="BDuerScreenMsg-h"><a href="#BDuerScreenMsg-h" class="headerlink" title="BDuerScreenMsg.h"></a>BDuerScreenMsg.h</h4><ol>
<li>获取播放器页面信息，还很多</li>
<li>歌曲信息</li>
<li>卡片信息</li>
<li>文本信息</li>
</ol>
<h4 id="BDuerSpeaker-h"><a href="#BDuerSpeaker-h" class="headerlink" title="BDuerSpeaker.h"></a>BDuerSpeaker.h</h4><ol>
<li>获取扬声器状态</li>
<li>设置音量大小</li>
<li>是否静音</li>
<li>注册时间回调</li>
<li><p>音量事件：</p>
<ul>
<li>音量改变（VolumeChanged）、</li>
<li>静音状态改变（MuteChanged）</li>
<li>扬声器状态（VolumeState）</li>
</ul>
</li>
</ol>
<h4 id="BDuerSystemInfo"><a href="#BDuerSystemInfo" class="headerlink" title="BDuerSystemInfo"></a>BDuerSystemInfo</h4><ol>
<li>从音响中获取设备系统信息</li>
<li>请求硬重置</li>
<li>设置设备名称</li>
<li>获取设备状态</li>
</ol>
<table>
<thead>
<tr>
<th>属性</th>
<th>信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSString * ssid;</td>
<td>//wifi热点名字</td>
</tr>
<tr>
<td>NSString * mac;</td>
<td>//mac地址</td>
</tr>
<tr>
<td>NSString * bleMac;</td>
<td>//蓝牙mac地址</td>
</tr>
<tr>
<td>NSString * sn;</td>
<td>//序列号</td>
</tr>
<tr>
<td>NSString * ip;</td>
<td>//ip地址</td>
</tr>
<tr>
<td>NSString * clientID;</td>
<td>//开发者账号</td>
</tr>
<tr>
<td>NSString * deviceID;</td>
<td>//</td>
</tr>
<tr>
<td>NSString * appID;</td>
<td>//产品AppID，已废弃</td>
</tr>
<tr>
<td>NSString * deviceVersion;</td>
<td></td>
</tr>
<tr>
<td>NSString * softwareVersion;</td>
<td></td>
</tr>
<tr>
<td>NSString * protocolVersion;</td>
<td></td>
</tr>
<tr>
<td>NSString * onlineStatus;</td>
<td>//是否能连上公网，0 是能连上</td>
</tr>
<tr>
<td>NSString * name;</td>
<td>//可选，设备的名称，调用fetchSystemInfoFromServer会返回</td>
</tr>
<tr>
<td>NSString * tone;</td>
<td>//可选，设备的音色，调用fetchSystemInfoFromServer会返回</td>
</tr>
</tbody>
</table>
<h4 id="BDuerTTSInfo-h"><a href="#BDuerTTSInfo-h" class="headerlink" title="BDuerTTSInfo.h"></a>BDuerTTSInfo.h</h4><ol>
<li><p>TTS音色</p>
<ul>
<li>获取TTS状态</li>
<li>更新TTS音色</li>
<li>注册音色改变</li>
</ul>
<p>属性                      |取值<br>—————————-|——–<br>NSString <em> tts_volume;  |//可选，声音大小 0-9，默认为 5<br>NSString </em> tts_speed;|//可选，语速 0-9，默认为 5<br>NSString <em> tts_pitch;|//可选，语调0-9，默认为 5<br>SString </em> tts_speaker;|//可选，声音0:普通女声 1:普通男生 2:特别男生 3:情感男生&lt;度逍遥&gt; 4:情感儿童生&lt;度丫丫&gt;，默认为 0<br>NSString <em> tts_aue;|//可选，音频格式<br>NSString </em> tts_rate;|//可选，码率<br>NSString * tts_xml;|//可选，是不是xml</p>
</li>
</ol>
<h4 id="BDuerTVLink-h"><a href="#BDuerTVLink-h" class="headerlink" title="BDuerTVLink.h"></a>BDuerTVLink.h</h4><ol>
<li>控制音箱去发送Link指令给电视</li>
<li>控制音箱去发送UnLink指令给电视</li>
<li>注册音箱与电视连接状态回调</li>
<li>获取连接状态和信息</li>
</ol>
<h2 id="DomeAPP做了些什么"><a href="#DomeAPP做了些什么" class="headerlink" title="DomeAPP做了些什么"></a>DomeAPP做了些什么</h2><h4 id="登录接口测试"><a href="#登录接口测试" class="headerlink" title="登录接口测试"></a>登录接口测试</h4><ol>
<li><p>登录</p>
<p>网页登录并授权，返回OAuthCode，进入DUEROS</p>
</li>
<li><p>是否登录</p>
<p>若已登录，显示登录，否则显示未登录</p>
</li>
<li><p>注销登录</p>
<p>注销成功</p>
</li>
<li><p>授权度秘</p>
<p>对话式人工智能系统：影音娱乐，生活服务，交通出行，信息查询等</p>
<p>测试 返回授权结果： data，登录IDloginID，信息msg和状态码status</p>
</li>
<li><p>获取用户信息</p>
<p>一直出现错误null</p>
</li>
<li><p>切换用户</p>
<p>切换用户显示：60194486，无可操作-&gt;back。界面显示切换用户错误</p>
</li>
<li><p>登出指定用户</p>
<p>无反应</p>
</li>
<li><p>移除指定用户</p>
<p>无反应</p>
</li>
</ol>
<h4 id="配网接口测试"><a href="#配网接口测试" class="headerlink" title="配网接口测试"></a>配网接口测试</h4><ol>
<li><p>蓝牙配网测试</p>
<p>电脑手机蓝牙均不可被发现（需要先登录）</p>
</li>
<li><p>AP配网测试</p>
<p>无音响AP，点击确定到设置界面</p>
</li>
</ol>
<h4 id="获取云端设备"><a href="#获取云端设备" class="headerlink" title="获取云端设备"></a>获取云端设备</h4><p>   无反应（代码中有TV，audio）应该都没获取到</p>
<h4 id="百度取消对产品的授权"><a href="#百度取消对产品的授权" class="headerlink" title="百度取消对产品的授权"></a>百度取消对产品的授权</h4><p>   返回data数据，loginID ，msg ，status</p>
<h4 id="版本号：-0-1-5"><a href="#版本号：-0-1-5" class="headerlink" title="版本号： 0.1.5"></a>版本号： 0.1.5</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;智能家居方向，DuerHomeSDK研究及开发&lt;/p&gt;
&lt;h2 id=&quot;DuerHomeSDK具备的功能&quot;&gt;&lt;a href=&quot;#DuerHomeSDK具备的功能&quot; class=&quot;headerlink&quot; title=&quot;DuerHomeSDK具备的功能&quot;&gt;&lt;/a&gt;DuerHom
    
    </summary>
    
      <category term="OC" scheme="http://yoursite.com/categories/OC/"/>
    
    
      <category term="2" scheme="http://yoursite.com/tags/2/"/>
    
  </entry>
  
  <entry>
    <title>[Python_scrapy基础爬虫]</title>
    <link href="http://yoursite.com/2017/12/04/Python-scrapy%E5%9F%BA%E7%A1%80%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2017/12/04/Python-scrapy基础爬虫/</id>
    <published>2017-12-04T03:07:29.000Z</published>
    <updated>2017-12-04T03:15:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>welcome to my blog  thanks</p>
<p>Dome: <a href="https://github.com/princeSmall/Scrapy" target="_blank" rel="noopener">github地址</a></p>
<p>学习整理了两周时间开始写Python爬虫，完全出于自己的爱好</p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>1、scrapy startproject tutorial （你的项目名称）</p>
<ol>
<li>spider 爬虫目录，用于创建文件，编写爬虫代码</li>
<li>settings 配置文件</li>
<li>items 设置数据存储</li>
<li>pipelines 数据处理和存储</li>
</ol>
<h4 id="编写爬虫代码"><a href="#编写爬虫代码" class="headerlink" title="编写爬虫代码"></a>编写爬虫代码</h4><p>1、定义一个类princesmall，导入scrapy</p>
<p>2、必须定义name、allowed_domains、start_urls</p>
<ol>
<li>name：爬虫的名字</li>
<li>allowed_domains：爬取的范围</li>
<li>start_urls 爬取得开始网页</li>
</ol>
<pre><code> name = &quot;lezhi&quot;
 allowed_domains = [&quot;lezhi.com&quot;]
 start_urls = [
&quot;http://www.lezhi.com/Resume/hefei?perpage/10/companyname_type/1/keywords/%CB%E3%B7%A8%B9%A4%B3%CC%CA%A6/degreem/0/page/1=&quot;,
 ]
</code></pre><p>3、def parse （self，response）</p>
<pre><code>scrapy 返回response的默认方法
</code></pre><ol>
<li><p>css解析，直接定位到目录</p>
<p>   allfill = response.css(“.right.fll”).xpath(“label/div[1]/text()”).extract()</p>
</li>
<li><p>XPath解析，层层下拨</p>
<p>   name = response.xpath(‘//a/div/label/div[1]/text()’).extract()</p>
</li>
</ol>
<h4 id="保存爬取数据"><a href="#保存爬取数据" class="headerlink" title="保存爬取数据"></a>保存爬取数据</h4><ol>
<li><p>settings.py 文件</p>
<pre><code>ROBOTSTXT_OBEY = False

ITEM_PIPELINES = {
&apos;tutorial.pipelines.TutorialPipeline&apos;: 300,
}
</code></pre></li>
<li><p>items.py 文件</p>
<pre><code>class TutorialItem(scrapy.Item):
# define the fields for your item here like:
# name = scrapy.Field()
company = scrapy.Field()
name = scrapy.Field()
info = scrapy.Field()
pass
</code></pre></li>
<li><p>pipelines.py 文件</p>
<pre><code>import json
import codecs

class TutorialPipeline(object):
       def __init__(self):
           self.file = codecs.open(&apos;small.json&apos;,&apos;wb&apos;,encoding=&apos;utf-8&apos;)

       def process_item(self, item, spider):
           line = json.dumps(dict(item)) + &apos;\n&apos;
           print line, &apos;&gt;&gt;&gt;&gt;&gt;&apos;
           self.file.write(line.decode(&quot;unicode_escape&quot;))
           return item
</code></pre></li>
</ol>
<p>好吧，简单的数据爬取，完美收关</p>
<h4 id="项目中遇到的问题总结"><a href="#项目中遇到的问题总结" class="headerlink" title="项目中遇到的问题总结"></a>项目中遇到的问题总结</h4><p>下载scrapy及使用问题</p>
<ul>
<li><p>Permission denied </p>
<pre><code>权限问题：加sudo，输入密码
</code></pre></li>
<li><p>TLSVersion.TLSv1_1: SSL.OP_NO_TLSv1_1 </p>
<pre><code>版本问题： pip install scrapy 需要 pyopenssl  twisted ==13.1.0
</code></pre></li>
<li><p>spider加载item类中方法，找不到</p>
<pre><code>目录问题：from ..items import DmozItem（第一个点表示当前目录，第二个点表示上层目录）
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;welcome to my blog  thanks&lt;/p&gt;
&lt;p&gt;Dome: &lt;a href=&quot;https://github.com/princeSmall/Scrapy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="8" scheme="http://yoursite.com/tags/8/"/>
    
  </entry>
  
  <entry>
    <title>[iOS_排序算法]</title>
    <link href="http://yoursite.com/2017/11/24/iOS-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/24/iOS-排序算法/</id>
    <published>2017-11-24T06:36:37.000Z</published>
    <updated>2017-11-24T08:19:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客主要对快速排序，冒泡排序和简单选择排序进行改进，在时间处理上降低1/2。</p>
<h4 id="QuickSort-快速升序排序"><a href="#QuickSort-快速升序排序" class="headerlink" title="QuickSort - 快速升序排序"></a>QuickSort - 快速升序排序</h4><p>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法</p>
<p><img src="/2017/11/24/iOS-排序算法/Quick.jpg" alt=""></p>
<ol>
<li>先调用改进算法QsortImprove使之基本有序</li>
<li><p>再用插入排序对基本有序序列排序</p>
<pre><code>+ (void)quickSort:(NSMutableArray *)array arrayCount:(int)c centerK:(int)k{
[self qsortImprove:array lowA:0 highB:c centerK:k];
for (int i = 1; i &lt;= c; i ++) {
int tmp = (int)[array[i] integerValue];
int j = i - 1;
while (tmp &lt; (int)[array[j] integerValue]) {
    array[j + 1] = array[j];
    j = j - 1;
}
array[j + 1] = [NSNumber numberWithInt:tmp];
   }
}
</code></pre></li>
<li><p>长度大于k时开始递归，k为指定的数</p>
</li>
<li><p>调用的PartitionArray 算法保持不变</p>
<pre><code>+(void)qsortImprove:(NSMutableArray *)array lowA:(int)a highB:(int)b centerK:(int)k{
if (b - a &gt; k) {
int privot = [self partitionArray:array lowA:a highB:b];
[self qsortImprove:array lowA:a highB:privot -1 centerK:k];
[self qsortImprove:array lowA:privot +1 highB:b centerK:k];
  }
}
</code></pre></li>
<li><p>基本有序</p>
<pre><code>+ (int)partitionArray:(NSMutableArray *)array lowA:(int)a highB:(int)b{
//    基准元素
 int privotKey = (int)array[a];
//     从表的两端交替地向中间扫描
while (a &lt; b) {

while (a &lt; b &amp;&amp; [array[b] integerValue] &gt;= privotKey) {
    b--;
    int tmp = (int)[array[a] integerValue];
    array[a] = array[b];
    array[b] = [NSNumber numberWithInt:tmp];
}
while (a &lt; b &amp;&amp; [array[a] integerValue] &lt;= privotKey) {
    a++;
    int tmp = (int)[array[a] integerValue];
    array[a] = array[b];
    array[b] = [NSNumber numberWithInt:tmp];
    }
  }
 return a;
}
</code></pre></li>
</ol>
<h4 id="BubbleSort-冒泡排序"><a href="#BubbleSort-冒泡排序" class="headerlink" title="BubbleSort - 冒泡排序"></a>BubbleSort - 冒泡排序</h4><p>对冒泡排序常见的改进方法是加入一标志性变量exchange，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序，避免不必要的比较过程。<br>传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。</p>
<p><img src="/2017/11/24/iOS-排序算法/Bubble.jpg" alt=""></p>
<pre><code>+(void)bubbleSort:(NSMutableArray *)array lowA:(int)low highB:(int)high{
int tmp,j;
while (low &lt; high) {
    for (j= low; j &lt; high; ++j) //正向冒泡,找到最大者
        if ([array[j] integerValue]&gt; [array[j+1] integerValue]) {
            tmp = (int)[array[j] integerValue];
            array[j]=array[j+1];
            array[j+1]=[NSNumber numberWithInt:tmp];
        }
    --high;                 //修改high值, 前移一位
    for ( j= high; j &gt; low; --j) //反向冒泡,找到最小者
        if ([array[j] integerValue]&lt;[array[j-1] integerValue]) {
            tmp = (int)[array[j] integerValue];
            array[j]=array[j-1];
            array[j-1]=[NSNumber numberWithInt:tmp];
        }
    ++low;//修改low值,后移一位
  }
}
</code></pre><h4 id="SelectSort-简单选择排序"><a href="#SelectSort-简单选择排序" class="headerlink" title="SelectSort - 简单选择排序"></a>SelectSort - 简单选择排序</h4><ol>
<li><p>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；</p>
</li>
<li><p>然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。</p>
</li>
</ol>
<p><img src="/2017/11/24/iOS-排序算法/Select.jpg" alt=""></p>
<pre><code>+ (void)selectSort:(NSMutableArray *)array arrayCount:(int)n{
for (int i = 0; i &lt; n; i ++) {
    for (int j = i + 1; j &lt; n; j ++) {
        if ([array[i] integerValue] &gt; [array[j] integerValue]) {
            int temp = [array[i] intValue];
            array[i] = array[j];
            array[j] = [NSNumber numberWithInt:temp];
        }
    }
 }
}
</code></pre><h4 id="ComparatorSort-比较排序"><a href="#ComparatorSort-比较排序" class="headerlink" title="ComparatorSort - 比较排序"></a>ComparatorSort - 比较排序</h4><p>利用系统自带的方法比较排序</p>
<pre><code>+(NSArray *)ComparatorSort:(NSMutableArray *)array{

NSArray * arr = [array sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2)
{
    if ([obj1 integerValue] &gt; [obj2 integerValue]) {
        return (NSComparisonResult)NSOrderedDescending;
    }
    if ([obj1 integerValue] &lt; [obj2 integerValue]) {
        return (NSComparisonResult)NSOrderedAscending;
    }
    return (NSComparisonResult)NSOrderedSame;
}];
return arr;
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客主要对快速排序，冒泡排序和简单选择排序进行改进，在时间处理上降低1/2。&lt;/p&gt;
&lt;h4 id=&quot;QuickSort-快速升序排序&quot;&gt;&lt;a href=&quot;#QuickSort-快速升序排序&quot; class=&quot;headerlink&quot; title=&quot;QuickSort - 
    
    </summary>
    
      <category term="OC" scheme="http://yoursite.com/categories/OC/"/>
    
    
  </entry>
  
  <entry>
    <title>[Animation_ViewAnimation应用]</title>
    <link href="http://yoursite.com/2017/11/22/Animation-ViewAnimation%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/11/22/Animation-ViewAnimation应用/</id>
    <published>2017-11-22T11:42:14.000Z</published>
    <updated>2017-11-22T12:48:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome:<a href="https://github.com/princeSmall/CellAnimation.git" target="_blank" rel="noopener">github地址</a></p>
<p>最近各式各样的动画也是被我玩坏了，今天直接拿来结合需求用。今天主要整理了UIView的动画方法，跟present，push不同，但又很相似，可以满足日常所需动画。话不多说，直接上码。</p>
<p><img src="/2017/11/22/Animation-ViewAnimation应用/AnimationView.gif" alt=""></p>
<h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><pre>
+(void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^ __nullable)(BOOL finished))completion;
duration : 动画时间
delay : 延迟时间
options : 动画的方式，so much...
animation : 需要执行的动作
completion : 完成后的方法，可以为空
</pre>

<h4 id="案例，登录注册的左移，右移和透明"><a href="#案例，登录注册的左移，右移和透明" class="headerlink" title="案例，登录注册的左移，右移和透明"></a>案例，登录注册的左移，右移和透明</h4><pre><code>[UIView animateWithDuration:1 animations:^{
    CGFloat x = self.nameTextField.frame.origin.x;
    x += Width - 40;
    self.nameTextField.alpha = 1.0;
    [self.nameTextField setFrame:CGRectMake(x, 100, Width - 80, 50)];
} completion:^(BOOL finished) {

}];
[UIView animateWithDuration:1 delay:0.5 options:(UIViewAnimationOptionCurveEaseInOut) animations:^{
    CGFloat x = self.passwordTextField.frame.origin.x;
    x -= Width - 40;
    self.passwordTextField.alpha = 1.0;
    [self.passwordTextField setFrame:CGRectMake(x, 200, Width - 80, 50)];
} completion:^(BOOL finished) {

}];
[UIView animateWithDuration:1 delay:1 options:(UIViewAnimationOptionCurveEaseInOut) animations:^{
    self.loginBtn.alpha =1.0;
    [self.loginBtn setTitle:@&quot;Login&quot; forState:UIControlStateNormal];
} completion:^(BOOL finished) {

}];

目前动画实现登录注册就好了
</code></pre><h3 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h3><pre>
+(void)transitionWithView:(UIView *)view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^ __nullable)(void))animations completion:(void (^ __nullable)(BOOL finished))completion;
view : 需要变换的视图
duration : 动画的时间
options : 动画的方式， so much...
animation : 需要执行的动作
completion : 完成后的方法，可以为空
</pre>

<h4 id="案例，点击切换图片"><a href="#案例，点击切换图片" class="headerlink" title="案例，点击切换图片"></a>案例，点击切换图片</h4><pre><code>[UIView transitionWithView:cell.imageView duration:1 options:UIViewAnimationOptionTransitionFlipFromLeft animations:^{
    if ([cell.imageView.image isEqual:[UIImage imageNamed:@&quot;two&quot;]]) {
        cell.imageView.image = [UIImage imageNamed:@&quot;one&quot;];
    }else{
        cell.imageView.image = [UIImage imageNamed:@&quot;two&quot;];
    }
} completion:^(BOOL finished) {

}];

目前点击动画翻页就好了
</code></pre><h4 id="KeyFrame"><a href="#KeyFrame" class="headerlink" title="KeyFrame"></a>KeyFrame</h4><pre>
+(void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void (^)(void))animations completion:(void (^ __nullable)(BOOL finished))completion;
duration : 动画时间
delay : 延迟时间
options : 动画方式， so much...
animation : 需要执行的动作
completion : 完成后的方法，可以为空
</pre>

<h4 id="案例，移动画线"><a href="#案例，移动画线" class="headerlink" title="案例，移动画线"></a>案例，移动画线</h4><pre><code>[UIView animateKeyframesWithDuration:1 delay:0 options:(UIViewKeyframeAnimationOptionCalculationModeLinear) animations:^{
        CAShapeLayer * shapelayer = [CAShapeLayer layer];
        self.path = [UIBezierPath bezierPath];
        [self.path moveToPoint:CGPointMake(50, 200)];
        [self.path addLineToPoint:CGPointMake(200, 200)];
        [self.path addLineToPoint:CGPointMake(200, 350)];
        [self.path addLineToPoint:CGPointMake(350, 350)];
        shapelayer.path = self.path.CGPath;
        shapelayer.fillColor = [UIColor clearColor].CGColor;
        shapelayer.lineWidth = 4.0f;
        shapelayer.strokeColor = [UIColor redColor].CGColor;
        [self.view.layer addSublayer:shapelayer];
        CABasicAnimation *pathAnima = [CABasicAnimation animationWithKeyPath:@&quot;strokeEnd&quot;];
        pathAnima.duration = 3.0f;
        pathAnima.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
        pathAnima.fromValue = [NSNumber numberWithFloat:0.0f];
        pathAnima.toValue = [NSNumber numberWithFloat:1.0f];
        pathAnima.fillMode = kCAFillModeForwards;
        pathAnima.removedOnCompletion = NO;
        [shapelayer addAnimation:pathAnima forKey:@&quot;strokeEndAnimation&quot;];
    } completion:^(BOOL finished) {      
    }];

目前一条移动的线条就好了
</code></pre><h3 id="炫酷的TableViewCell出场动画"><a href="#炫酷的TableViewCell出场动画" class="headerlink" title="炫酷的TableViewCell出场动画"></a>炫酷的TableViewCell出场动画</h3><p>这里只给出前几条，代码里已经全部封装好了</p>
<h4 id="Animation类，遍历改变alpha"><a href="#Animation类，遍历改变alpha" class="headerlink" title="Animation类，遍历改变alpha"></a>Animation类，遍历改变alpha</h4><pre><code>+(void)alphaAnimationWithTableView:(UITableView *)tableView {  
NSArray *cells = tableView.visibleCells;
for (int i = 0; i &lt; cells.count; i++) {
    UITableViewCell *cell = [tableView.visibleCells objectAtIndex:i];
    cell.alpha = 0.0;
    [UIView animateWithDuration:0.3 delay:i*0.05 options:0 animations:^{
        cell.alpha = 1.0;
    } completion:^(BOOL finished) {

    }];
}
}
</code></pre><h4 id="Transition类"><a href="#Transition类" class="headerlink" title="Transition类"></a>Transition类</h4><h5 id="遍历移动x"><a href="#遍历移动x" class="headerlink" title="遍历移动x"></a>遍历移动x</h5><pre><code>+(void)moveAnimationWithTableView:(UITableView *)tableView {
NSArray *cells = tableView.visibleCells;
for (int i = 0; i &lt; cells.count; i++) {
    CGFloat totalTime = 0.4;
    UITableViewCell *cell = [tableView.visibleCells objectAtIndex:i];
    cell.transform = CGAffineTransformMakeTranslation(-XS_SCREEN_WIDTH, 0);
    [UIView animateWithDuration:0.4 delay:i*(totalTime/cells.count) usingSpringWithDamping:0.7 initialSpringVelocity:1/0.7 options:UIViewAnimationOptionCurveEaseIn animations:^{
        cell.transform = CGAffineTransformIdentity;
    } completion:^(BOOL finished) {

    }];
}
}
</code></pre><h5 id="遍历交叉移动x"><a href="#遍历交叉移动x" class="headerlink" title="遍历交叉移动x"></a>遍历交叉移动x</h5><pre><code>+(void)shakeAnimationWithTableView:(UITableView *)tableView {
NSArray *cells = tableView.visibleCells;
for (int i = 0; i &lt; cells.count; i++) {
    UITableViewCell *cell = [cells objectAtIndex:i];
    if (i%2 == 0) {
        cell.transform = CGAffineTransformMakeTranslation(-XS_SCREEN_WIDTH,0);
    }else {
        cell.transform = CGAffineTransformMakeTranslation(XS_SCREEN_WIDTH,0);
    }
    [UIView animateWithDuration:0.4 delay:i*0.03 usingSpringWithDamping:0.75 initialSpringVelocity:1/0.75 options:0 animations:^{
        cell.transform = CGAffineTransformIdentity;
    } completion:^(BOOL finished) {

    }];
}
 }
</code></pre><h5 id="遍历移动y"><a href="#遍历移动y" class="headerlink" title="遍历移动y"></a>遍历移动y</h5><pre><code>+(void)fallAnimationWithTableView:(UITableView *)tableView {
NSArray *cells = tableView.visibleCells;   
NSTimeInterval totalTime = 0.8;  
for (int i = 0; i &lt; cells.count; i++) {
    UITableViewCell *cell = [tableView.visibleCells objectAtIndex:i];
    cell.transform = CGAffineTransformMakeTranslation(0, - XS_SCREEN_HEIGHT);
    [UIView animateWithDuration:0.3 delay:(cells.count - i)*(totalTime/cells.count) options:0 animations:^{
        cell.transform = CGAffineTransformIdentity;
    } completion:^(BOOL finished) {

    }];
}
</code></pre><p>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome:&lt;a href=&quot;https://github.com/princeSmall/CellAnimation.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github地
    
    </summary>
    
      <category term="Animation" scheme="http://yoursite.com/categories/Animation/"/>
    
    
      <category term="6" scheme="http://yoursite.com/tags/6/"/>
    
  </entry>
  
  <entry>
    <title>[Animation_ViewAnimation]</title>
    <link href="http://yoursite.com/2017/11/21/Animation-ViewAnimation/"/>
    <id>http://yoursite.com/2017/11/21/Animation-ViewAnimation/</id>
    <published>2017-11-21T07:57:57.000Z</published>
    <updated>2017-11-21T08:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome: <a href="https://github.com/princeSmall/UIViewControllerAnimation.git" target="_blank" rel="noopener">github地址</a></p>
<p><img src="/2017/11/21/Animation-ViewAnimation/ViewAnimations.gif" alt="ViewAnimation"></p>
<h3 id="ViewControllerAnimation"><a href="#ViewControllerAnimation" class="headerlink" title="ViewControllerAnimation"></a>ViewControllerAnimation</h3><p>注：所有的动画我都封装起来了，这里不仅有present和dismiss在viewController中跳转，还有各种动画push和pop，当然view的动画出场也是必不可少的。拿了直接用即可，简单粗暴看代码，这里可以让你知其然，知其所以然。</p>
<h4 id="PresentAnimation"><a href="#PresentAnimation" class="headerlink" title="PresentAnimation"></a>PresentAnimation</h4><p>实现UIViewControllerTransitioningDelegate的代理方法，把present从下面出来的view从右边动画出来，具体代码看github代码，具体方法如下：</p>
<pre>
-(NSTimeInterval)transitionDuration:(id<uiviewcontrollercontexttransitioning>)transitionContext{
    return 1.0;
}
-(void)animateTransition:(id<uiviewcontrollercontexttransitioning>)transitionContext{
 UIViewController * fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];
    UIViewController * toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];
    UIView *containerView =  [transitionContext containerView];
    UIView *fromView = nil;
    UIView *toView = nil;

    if ([transitionContext respondsToSelector:@selector(viewForKey:)]) {
        fromView = [transitionContext viewForKey:UITransitionContextFromViewKey];
        toView = [transitionContext viewForKey:UITransitionContextToViewKey];
    }else{
        fromView = fromViewController.view;
        toView = toViewController.view;
    }
    BOOL isPresent = (toViewController.presentingViewController == fromViewController);
    CGRect fromFrame = [transitionContext initialFrameForViewController:fromViewController];
    CGRect toFrame = [transitionContext finalFrameForViewController:toViewController];
    if (isPresent) {
        fromView.frame = fromFrame;
        toView.frame = CGRectOffset(toFrame, toFrame.size.width, 0);
        [containerView addSubview:toView];
    }  
    NSTimeInterval transitionDuration = [self transitionDuration:transitionContext];
    [UIView animateWithDuration:transitionDuration animations:^{
        if (isPresent) {
            toView.frame = toFrame;
            fromView.frame = CGRectOffset(fromFrame, fromFrame.size.width*0.3*-1, 0);
        }
    } completion:^(BOOL finished) {
        BOOL isCancelled = [transitionContext transitionWasCancelled];
        if (isCancelled)
            [toView removeFromSuperview]; 
        [transitionContext completeTransition:!isCancelled];
    }];
}
</uiviewcontrollercontexttransitioning></uiviewcontrollercontexttransitioning></pre>


<pre>
-(id<uiviewcontrolleranimatedtransitioning>)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source{
    return (id)[[PresentAnimation alloc]init];
}
</uiviewcontrolleranimatedtransitioning></pre>

<h4 id="DismissAnimation"><a href="#DismissAnimation" class="headerlink" title="DismissAnimation"></a>DismissAnimation</h4><pre>
- (NSTimeInterval)transitionDuration:(id<uiviewcontrollercontexttransitioning>)transitionContext{
    return 1.0;
}
-(void)animateTransition:(id<uiviewcontrollercontexttransitioning>)transitionContext{
  UIViewController *fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];
    UIViewController *toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];

    UIView *containerView = [transitionContext containerView];
    UIView *fromView = nil;
    UIView *toView = nil;

    if ([transitionContext respondsToSelector:@selector(viewForKey:)]) {
        fromView = [transitionContext viewForKey:UITransitionContextFromViewKey];
        toView = [transitionContext viewForKey:UITransitionContextToViewKey];
    }else{
        fromView = fromViewController.view;
        toView = toViewController.view;
    }

    BOOL isDismiss = (fromViewController.presentingViewController == toViewController);   
    CGRect fromFrame = [transitionContext initialFrameForViewController:fromViewController];
    CGRect toFrame = [transitionContext finalFrameForViewController:toViewController];

    if (isDismiss) {
        fromView.frame = fromFrame;
        toView.frame = CGRectOffset(toFrame, toFrame.size.width*0.3*-1, 0);
        [containerView insertSubview:toView belowSubview:fromView];
    }
    NSTimeInterval transitionDuration = [self transitionDuration:transitionContext];
    [UIView animateWithDuration:transitionDuration animations:^{
        if (isDismiss) {
            toView.frame = toFrame;
            fromView.frame = CGRectOffset(fromFrame, fromFrame.size.width, 0);
        }
    } completion:^(BOOL finished) {
        BOOL isCancel = [transitionContext transitionWasCancelled];
        if (isCancel) {
            [toView removeFromSuperview];
        }
        [transitionContext completeTransition:!isCancel];
    }];
  }
</uiviewcontrollercontexttransitioning></uiviewcontrollercontexttransitioning></pre>

<pre>
- (nullable id <uiviewcontrolleranimatedtransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed {
    return (id)[[DismissAnimation alloc]init];
}
</uiviewcontrolleranimatedtransitioning></pre>


<h4 id="PushAnimation"><a href="#PushAnimation" class="headerlink" title="PushAnimation"></a>PushAnimation</h4><p>动画添加新的view，type和subType不同，动画方式就不一样。这里只写一个不累赘</p>
<pre><code> +(void)pushView:(UIView *)View subView:(UIView *)subView AndAnimationType:(NSString *)type AndsubType:(NSString *)subType{  
CATransition *transition = [CATransition animation];
transition.duration = 1.0f;
transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
transition.type = type;
transition.subtype = subType;
[View.layer addAnimation:transition forKey:@&quot;pushTransitionAnimation&quot;];
[View addSubview:subView];
  }
</code></pre><h4 id="PopAnimation"><a href="#PopAnimation" class="headerlink" title="PopAnimation"></a>PopAnimation</h4><p>动画移除新的view</p>
<pre><code> +(void)popView:(UIView *)View subView:(UIView *)subView AndAnimationType:(NSString *)type AndsubType:(NSString *)subType {
CATransition *transition = [CATransition animation];
transition.duration = 1.0f;
transition.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
transition.type = type;
transition.subtype = subType;
[View.superview.layer addAnimation:transition forKey:@&quot;popTransitionAnimation&quot;];
[subView removeFromSuperview];
 }
</code></pre><p>注：关于CATransition的type和subType的介绍，前两篇博客已经介绍过，看Animation_CATransition这篇。</p>
<h4 id="ScaleViewAnimation"><a href="#ScaleViewAnimation" class="headerlink" title="ScaleViewAnimation"></a>ScaleViewAnimation</h4><p>CGAffineTransform 主要用于形变，位移和旋转，可用于动画展示</p>
<h5 id="transform属性介绍，这里介绍最常用和好用的，其他属性去看CGAffineTransform"><a href="#transform属性介绍，这里介绍最常用和好用的，其他属性去看CGAffineTransform" class="headerlink" title="transform属性介绍，这里介绍最常用和好用的，其他属性去看CGAffineTransform"></a>transform属性介绍，这里介绍最常用和好用的，其他属性去看CGAffineTransform</h5><ul>
<li><p>位移X,Y</p>
<pre><code>CGAffineTransformMakeTranslation(CGFloat tx, CGFloat ty)
</code></pre></li>
<li><p>伸缩X,Y</p>
<pre><code>CGAffineTransformMakeScale(CGFloat sx, CGFloat sy)
</code></pre></li>
<li><p>旋转M_PI</p>
<pre><code>CGAffineTransformMakeRotation(CGFloat angle)
</code></pre></li>
<li><p>组合</p>
<pre><code>CGAffineTransformConcat(CGAffineTransform t1,CGAffineTransform t2)
</code></pre></li>
<li><p>回到原位</p>
<pre><code>CGAffineTransformIdentity
</code></pre></li>
</ul>
<h5 id="动画调用，包括动画时间，动画完成后回调"><a href="#动画调用，包括动画时间，动画完成后回调" class="headerlink" title="动画调用，包括动画时间，动画完成后回调"></a>动画调用，包括动画时间，动画完成后回调</h5> <pre>
  -(void)scaleView:(UIView *)view CGFloatX:(CGFloat)x CGFloatY:(CGFloat)y CGFloatW:(CGFloat)w CGFloatH:(CGFloat)h{
    CGFloat scaleW = self.window.frame.size.width / w;
    CGFloat scaleH = self.window.frame.size.height / h;
    CGFloat W = scaleW * 50 - 50 - x;
    CGFloat H = scaleH * 50 - 50 - y;
    [UIView animateWithDuration:1.0 animations:^{
        view.transform =CGAffineTransformConcat(CGAffineTransformMakeScale(scaleW, scaleH), CGAffineTransformMakeTranslation(W,H));
    } completion:^(BOOL finished) {
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            view.transform = CGAffineTransformIdentity;
        });
   }];

}
</pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome: &lt;a href=&quot;https://github.com/princeSmall/UIViewControllerAnimation.git&quot; target=&quot;_blank&quot; rel=&quot;noop
    
    </summary>
    
      <category term="Animation" scheme="http://yoursite.com/categories/Animation/"/>
    
    
      <category term="6" scheme="http://yoursite.com/tags/6/"/>
    
  </entry>
  
  <entry>
    <title>[Amimation_GroupAnimation]</title>
    <link href="http://yoursite.com/2017/11/20/Amimation-GroupAnimation/"/>
    <id>http://yoursite.com/2017/11/20/Amimation-GroupAnimation/</id>
    <published>2017-11-20T06:36:52.000Z</published>
    <updated>2017-11-20T06:52:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome: <a href="https://github.com/princeSmall/Full-animation-details" target="_blank" rel="noopener">github地址</a></p>
<p>CAAnimation大家族的最后一个组合动画，所有复杂的动画都是有组合动画合成的，也可以说是最简单的。其实没什么可说的，就上一个炫酷的心形组合动画好了，其余的可以在我的代码中看到，简单到你怀疑自己。</p>
<p><img src="/2017/11/20/Amimation-GroupAnimation/GroupAnimation.gif" alt="GroupAnimation"></p>
<h3 id="GroupAnimation"><a href="#GroupAnimation" class="headerlink" title="GroupAnimation"></a>GroupAnimation</h3><pre><code>animations：动画集合数组
</code></pre><h4 id="draw-a-heart"><a href="#draw-a-heart" class="headerlink" title="draw a heart"></a>draw a heart</h4><pre>
- (void)drawRect:(CGRect)rect {
    // 间距
    CGFloat padding = 4.0;
    // 半径(小圆半径)
    CGFloat curveRadius = (rect.size.width - 2 * padding)/4.0;
    UIBezierPath *heartPath = [UIBezierPath bezierPath];
    // 起点
    CGPoint tipLocation = CGPointMake(rect.size.width/2, rect.size.height-padding);
    // 从起点开始画
    [heartPath moveToPoint:tipLocation];
    // (左圆的第二个点)
    CGPoint topLeftCurveStart = CGPointMake(padding, rect.size.height/2.4);
    // 添加二次曲线
    [heartPath addQuadCurveToPoint:topLeftCurveStart controlPoint:CGPointMake(topLeftCurveStart.x, topLeftCurveStart.y + curveRadius)];
    // 画圆
    [heartPath addArcWithCenter:CGPointMake(topLeftCurveStart.x+curveRadius, topLeftCurveStart.y) radius:curveRadius startAngle:M_PI endAngle:0 clockwise:YES];
    // (左圆的第二个点)
    CGPoint topRightCurveStart = CGPointMake(topLeftCurveStart.x + 2*curveRadius, topLeftCurveStart.y);
    // 画圆
    [heartPath addArcWithCenter:CGPointMake(topRightCurveStart.x+curveRadius, topRightCurveStart.y) radius:curveRadius startAngle:M_PI endAngle:0 clockwise:YES];
    // 右上角控制点
    CGPoint topRightCurveEnd = CGPointMake(topLeftCurveStart.x + 4*curveRadius, topRightCurveStart.y);
    // 添加二次曲线
    [heartPath addQuadCurveToPoint:tipLocation controlPoint:CGPointMake(topRightCurveEnd.x, topRightCurveEnd.y+curveRadius)];
    // 设置填充色
    [[UIColor redColor] setFill];
    [heartPath fill];

    heartPath.lineWidth = 2;
    heartPath.lineCapStyle  = kCGLineCapRound;
    heartPath.lineJoinStyle = kCGLineJoinRound;
    [[UIColor yellowColor] setStroke];
    [heartPath stroke];

}
</pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome: &lt;a href=&quot;https://github.com/princeSmall/Full-animation-details&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;g
    
    </summary>
    
      <category term="Animation" scheme="http://yoursite.com/categories/Animation/"/>
    
    
      <category term="6" scheme="http://yoursite.com/tags/6/"/>
    
  </entry>
  
  <entry>
    <title>[Animation_ProgressAnimation]</title>
    <link href="http://yoursite.com/2017/11/19/Animation-ProgressAnimation/"/>
    <id>http://yoursite.com/2017/11/19/Animation-ProgressAnimation/</id>
    <published>2017-11-19T02:32:16.000Z</published>
    <updated>2017-11-20T02:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome: <a href="https://github.com/princeSmall/Full-animation-details" target="_blank" rel="noopener">github地址</a></p>
<p>今天主要讲一些动画的运用，也就是进度条，有弧形的，扇形的，圆形的。<br>其实没什么难点，我封装在一个个View里，直接调用就行，弧度跟着进度条走就OK的。<br>饮水思源，喜欢或者用得上就github给个Star</p>
<p><img src="/2017/11/19/Animation-ProgressAnimation/Progress.gif" alt=""></p>
<h3 id="ProgressAnimation"><a href="#ProgressAnimation" class="headerlink" title="ProgressAnimation"></a>ProgressAnimation</h3><h4 id="UIBezierPath方法详解"><a href="#UIBezierPath方法详解" class="headerlink" title="UIBezierPath方法详解"></a>UIBezierPath方法详解</h4><p>UIBezierPath 顾名思义，这是用贝塞尔曲线的方式来构建一段弧线，你可以用任意条弧线来组成你想要的形状</p>
<pre><code>-(void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise
center 圆弧圆心
radius 圆弧半径
startAngle 开始弧度
endAngle 结束弧度
closewise 是否顺时针

-(void)fill
填充颜色
-(void)stroke
线条颜色
</code></pre><p>注: 使用UIBezierPath绘画的代码写在自定义视图的drawRect:方法中</p>
<h4 id="CAShaperLayer"><a href="#CAShaperLayer" class="headerlink" title="CAShaperLayer"></a>CAShaperLayer</h4><p>CAShaperLayer也就是在现有的图层上再次添加或覆盖一层以达到界面在显示时会呈现出不同形状的效果   </p>
<pre><code>fillColor 填充颜色
strokeColor 边框颜色
lineWidth 线条宽度
path 线条曲线
strokeStart 开始角度
strokeEnd 结束角度
</code></pre><p>注：进度条主要就以上方法</p>
<h4 id="应用界面调用"><a href="#应用界面调用" class="headerlink" title="应用界面调用"></a>应用界面调用</h4><p>懒加载UISlider</p>
<pre>- (UISlider *)sectorSlider{
    if (_sectorSlider == nil) {
        _sectorSlider = [[UISlider alloc]initWithFrame:CGRectMake(winWidth/2.0 - 100, 100, 200, 10)];
        _sectorSlider.continuous = YES;
        [_sectorSlider addTarget:self action:@selector(sliderValueChanged:) forControlEvents:UIControlEventValueChanged];
        [_sectorSlider setMinimumValue:0.0];
        [_sectorSlider setMaximumValue:1.0];
    }
    return _sectorSlider;
}
</pre>

<p>点击调用UISlider方法</p>
<pre>-(void)sliderValueChanged:(UISlider *)slider{
    NSLog(@"---%f", slider.value);
    self.percentLable.text = [NSString stringWithFormat:@"%.2f",slider.value * 100];
    [self.animationView  setStartMove:slider.value];
    [self.animationBallView setStartMove:slider.value];
    [self.animationTimeView setStartMove:slider.value];
}
</pre>

<h4 id="圆形进度条生成"><a href="#圆形进度条生成" class="headerlink" title="圆形进度条生成"></a>圆形进度条生成</h4><ol>
<li>UIBezierPath根据进度条随时改变开始弧度和结束弧度，不设置中心point</li>
</ol>
<pre>
- (void)drawRect:(CGRect)rect {
    CGPoint point = CGPointMake(100, 100);
    CGFloat radius = 95.0f;

    UIBezierPath *ballPath = [UIBezierPath bezierPathWithArcCenter:point radius:radius startAngle:self.startAngle endAngle:self.endAngle clockwise:YES];

    [[UIColor greenColor]set];
    [ballPath fill];

    //    在球形的外面绘制一个描边空心的圆形，不然很难看
    UIBezierPath *strokePath = [UIBezierPath bezierPathWithArcCenter:point radius:radius startAngle:0 endAngle:-0.00000001 clockwise:YES];
    [[UIColor lightGrayColor]set];
    [strokePath stroke];
}


-(void)setStartMove:(CGFloat)value{

    //    设置起始点，位置是根据进度动态变换的
    self.startAngle = M_PI_2 - value * M_PI;
    self.endAngle = M_PI_2 + value * M_PI;

    [self setNeedsDisplay];
}
</pre>

<h4 id="扇形进度条生成"><a href="#扇形进度条生成" class="headerlink" title="扇形进度条生成"></a>扇形进度条生成</h4><ol>
<li>UIBezierPath根据进度条随时改变结束弧度，设置中心point</li>
</ol>
<pre>
-(void)drawRect:(CGRect)rect{
    CGPoint point = CGPointMake(100 , 100);
    CGFloat radius = 95.0f;
    CGFloat startAngle = - M_PI_2;
    CGFloat endAngle = startAngle + self.endAngle;
    UIBezierPath * path = [UIBezierPath bezierPathWithArcCenter:point radius:radius startAngle:startAngle endAngle:endAngle clockwise:YES];
    [path addLineToPoint:point];
    [[UIColor greenColor]set];
    [path fill];
    UIBezierPath *strokePath = [UIBezierPath bezierPathWithArcCenter:point radius:radius startAngle:0 endAngle:-0.00000001 clockwise:YES];
    [[UIColor lightGrayColor]set];
    [strokePath stroke];

}
- (void)setStartMove:(CGFloat)value{
    self.endAngle = value * M_PI * 2;
    [self setNeedsDisplay];
}
</pre>

<h4 id="弧形进度条生成"><a href="#弧形进度条生成" class="headerlink" title="弧形进度条生成"></a>弧形进度条生成</h4><ol>
<li>先画一个封闭的背景圆self.backShaperLayer</li>
<li>根据圆弧先设置self.shaperLayer的开始，根据进度条的改变随时改变结束弧度</li>
</ol>
<pre>
- (void)drawRect:(CGRect)rect{

    self.shapeLayer = [CAShapeLayer layer];
    self.shapeLayer.fillColor = [UIColor clearColor].CGColor;
    self.shapeLayer.lineWidth = 6.0f;
    self.shapeLayer.strokeColor = [UIColor greenColor].CGColor;


    self.backShapeLayer = [CAShapeLayer layer];
    self.backShapeLayer.fillColor = [UIColor clearColor].CGColor;
    self.backShapeLayer.lineWidth = 6.0f;
    self.backShapeLayer.strokeColor = [UIColor darkGrayColor].CGColor;


    UIBezierPath * path = [UIBezierPath bezierPath];
    [path addArcWithCenter:CGPointMake(50, 50) radius:40 startAngle:0 endAngle:M_PI * 2 clockwise:YES];

    self.shapeLayer.path = path.CGPath;
    self.shapeLayer.strokeStart = 0;
    self.shapeLayer.strokeEnd = self.toValue;
    self.backShapeLayer.path = path.CGPath;
    self.backShapeLayer.strokeStart = 0;
    self.backShapeLayer.strokeEnd = 1;
    [self.layer addSublayer:self.backShapeLayer];
    [self.layer addSublayer:self.shapeLayer];

}
- (void)setStartMove:(CGFloat)value{
    self.toValue = value;
    [self setNeedsDisplay];
}
</pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome: &lt;a href=&quot;https://github.com/princeSmall/Full-animation-details&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;g
    
    </summary>
    
      <category term="Animation" scheme="http://yoursite.com/categories/Animation/"/>
    
    
      <category term="6" scheme="http://yoursite.com/tags/6/"/>
    
  </entry>
  
  <entry>
    <title>[Animation_TransitionAnimation]</title>
    <link href="http://yoursite.com/2017/11/18/Animation-TransitionAnimation/"/>
    <id>http://yoursite.com/2017/11/18/Animation-TransitionAnimation/</id>
    <published>2017-11-18T02:58:25.000Z</published>
    <updated>2017-11-18T03:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome: <a href="https://github.com/princeSmall/Full-animation-details" target="_blank" rel="noopener">github地址</a></p>
<p>今天周末也没有工作要去加班正好可以好好地整理CATransition动画属性的讲解和应用，以及UIView翻页的实例，简单上手。</p>
<h3 id="TransitionAnimation"><a href="#TransitionAnimation" class="headerlink" title="TransitionAnimation"></a>TransitionAnimation</h3><ul>
<li>duration</li>
</ul>
<pre>设置动画时间</pre>

<ul>
<li>type</li>
</ul>
<pre>设置运动类型

1、公有API的Type

    Fade,                       淡入淡出
    Push,                       推挤
    Reveal,                     揭开
    MoveIn,                     覆盖

2、私有API的Type

    Cube,                       立方体
    SuckEffect,                 吮吸
    OglFlip,                    翻转
    RippleEffect,               波纹
    PageCurl,                   翻页
    PageUnCurl,                 反翻页
    CameraIrisHollowOpen,       开镜头
    CameraIrisHollowClose,      关镜头

3、UIView翻页Type

    CurlDown,                   下翻页
    CurlUp,                     上翻页
    FlipFromLeft,               左翻转
    FlipFromRight,              右翻转
</pre>

<ul>
<li>subtype</li>
</ul>
<pre>设置运动方向

    kCATransitionFromLeft
    kCATransitionFromBottom
    kCATransitionFromRight
    kCATransitionFromTop

</pre>

<ul>
<li>timingFunction</li>
</ul>
<pre>设置运动轨迹

 kCAMediaTimingFunctionLinear            线性,即匀速
 kCAMediaTimingFunctionEaseIn            先慢后快
 kCAMediaTimingFunctionEaseOut           先快后慢
 kCAMediaTimingFunctionEaseInEaseOut     先慢后快再慢
 kCAMediaTimingFunctionDefault           实际效果是动画中间比较快.

</pre>


<p>4、使用方法</p>
<pre><code>- (void) transitionWithType:(NSString *)type WithSubtype:(NSString *)subtype ForView:(UIView *)view{
CATransition *animation = [CATransition animation];
animation.duration = 0.7f;
animation.type = type;
if (subtype != nil) {
    animation.subtype = subtype;
}
[view.layer addAnimation:animation forKey:@&quot;animation&quot;];
 }
</code></pre><p>5、实例应用，UIView上下左右翻页</p>
<pre><code>- (void) animationWithView : (UIView *)view WithAnimationTransition : (UIViewAnimationTransition) transition{
[UIView animateWithDuration:1.0f animations:^{
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationTransition:transition forView:view cache:YES];
} completion:^(BOOL finished) {
    self.title = @&quot;0000&quot;;
}];
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome: &lt;a href=&quot;https://github.com/princeSmall/Full-animation-details&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;g
    
    </summary>
    
      <category term="Animation" scheme="http://yoursite.com/categories/Animation/"/>
    
    
      <category term="6" scheme="http://yoursite.com/tags/6/"/>
    
  </entry>
  
  <entry>
    <title>[Animation_keyFrameAnimation]</title>
    <link href="http://yoursite.com/2017/11/17/Animation-keyFrameAnimation/"/>
    <id>http://yoursite.com/2017/11/17/Animation-keyFrameAnimation/</id>
    <published>2017-11-17T00:00:31.000Z</published>
    <updated>2017-11-20T03:16:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome: <a href="https://github.com/princeSmall/Full-animation-details" target="_blank" rel="noopener">github地址</a></p>
<p>CAPropertyAnimation 的子类有CABsicAnimation 和 CAKeyframeAnimation。<br>今天要说的就是CAKeyframeAnimation关键帧动画，毫无疑问一切复杂的动画都是由简单的动画拼接来的，知其所以然，需要的时候必定能写出好的动画</p>
<p><img src="/2017/11/17/Animation-keyFrameAnimation/keyFrame.gif" alt="keyFrameAnimation"></p>
<h3 id="keyFrameAnimation"><a href="#keyFrameAnimation" class="headerlink" title="keyFrameAnimation"></a>keyFrameAnimation</h3><h4 id="属性值了解"><a href="#属性值了解" class="headerlink" title="属性值了解"></a>属性值了解</h4><p>1、关键帧值数组,一组变化值</p>
<pre><code>@property(nullable, copy) NSArray *values;
</code></pre><p>2、关键帧帧路径,优先级比values大</p>
<pre><code>@property(nullable) CGPathRef path;
</code></pre><p>3、每一帧对应的时间,时间可以控制速度.它和每一个帧相对应,取值为0.0-1.0,不设则每一帧时间相等.</p>
<pre><code>@property(nullable, copy) NSArray *keyTimes;
</code></pre><p>4、每一帧对应的时间曲线函数,也就是每一帧的运动节奏</p>
<pre><code>@property(nullable, copy) NSArray *timingFunctions;
</code></pre><p>5、动画的计算模式,默认值: kCAAnimationLinear.有以下几个值:</p>
<pre><code>@property(copy) NSString *calculationMode;

kCAAnimationLinear
关键帧为座标点的时候,关键帧之间直接直线相连进行插值计算;

kCAAnimationDiscrete
离散的,也就是没有补间动画

kCAAnimationPaced
平均，keyTimes跟timeFunctions失效

kCAAnimationCubic
对关键帧为座标点的关键帧进行圆滑曲线相连后插值计算,对于曲线的形状还可以通过tensionValues,continuityValues,biasValues来进行调整自定义,keyTimes跟timeFunctions失效

kCAAnimationCubicPaced
在kCAAnimationCubic的基础上使得动画运行变得均匀,就是系统时间内运动的距离相同,,keyTimes跟timeFunctions失效
</code></pre><p>6、动画的张力,当动画为立方计算模式的时候此属性提供了控制插值,因为每个关键帧都可能有张力所以连续性会有所偏差它的范围为[-1,1].同样是此作用</p>
<pre><code>@property(nullable, copy) NSArray *tensionValues;
</code></pre><p>7、动画的连续性值</p>
<pre><code>@property(nullable, copy) NSArray *continuityValues;
</code></pre><p>8、动画的偏斜率</p>
<pre><code>@property(nullable, copy) NSArray *biasValues;
</code></pre><p>9、动画沿路径旋转方式,默认为nil.它有两个值:</p>
<pre><code>@property(nullable, copy) NSString *rotationMode;
kCAAnimationRotateAuto
自动旋转
kCAAnimationRotateAutoReverse
自动翻转
</code></pre><h4 id="动画应用"><a href="#动画应用" class="headerlink" title="动画应用"></a>动画应用</h4><p>draw  a curve</p>
<pre><code>keyFrame：
path：路径
duration：单次时间
rotationMode：旋转样式
repeatCount：重复次数
</code></pre><p>1、弧形</p>
<pre><code>- (void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise ;
center ： 弧形的中心
radius： 弧形的半径
startAngle：弧形开始弧度
endAngle：弧形结束弧度
colockwise：顺逆时针
</code></pre><p>2、抛物线</p>
<pre><code>- (void)moveToPoint:(CGPoint)point
- (void)addQuadCurveToPoint:(CGPoint)endPoint controlPoint:(CGPoint)controlPoint;
point：开始位置
endPoint：结束位置
controlPoint：拐点位置
</code></pre><p>3、椭圆形</p>
<pre><code>+ (instancetype)bezierPathWithOvalInRect:(CGRect)rect;
rect： x起点
       y起点
       width宽度
       height高度
</code></pre><p>4、圆形</p>
<pre><code>rect：
width = height
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome: &lt;a href=&quot;https://github.com/princeSmall/Full-animation-details&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;g
    
    </summary>
    
      <category term="Animation" scheme="http://yoursite.com/categories/Animation/"/>
    
    
      <category term="6" scheme="http://yoursite.com/tags/6/"/>
    
  </entry>
  
  <entry>
    <title>[Animation_SpringAnimation]</title>
    <link href="http://yoursite.com/2017/11/16/Animation-SpringAnimation/"/>
    <id>http://yoursite.com/2017/11/16/Animation-SpringAnimation/</id>
    <published>2017-11-16T00:04:58.000Z</published>
    <updated>2017-11-18T03:01:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome: <a href="https://github.com/princeSmall/Full-animation-details" target="_blank" rel="noopener">github地址</a></p>
<p>昨天整理了BasicAnimation，昨晚对SpringAnimation也进行了梳理。说白了，它的父类也是BasicAnimation，也增加了UIView 实例方法的应用。明天将会整理CATransition动画使用方法和应用实例。</p>
<h3 id="SpringAnimation"><a href="#SpringAnimation" class="headerlink" title="SpringAnimation"></a>SpringAnimation</h3><p>1、</p>
<pre><code>mass:

质量，影响图层运动时的弹簧惯性，质量越大，弹簧拉伸和压缩的幅度越大

动画的速度变慢，并且波动幅度变大
</code></pre><p>2、 </p>
<pre><code>stiffness:

刚度系数(劲度系数/弹性系数)，刚度系数越大，形变产生的力就越大，运动越快
</code></pre><p>3、</p>
<pre><code>damping:

阻尼系数，阻止弹簧伸缩的系数，阻尼系数越大，停止越快
</code></pre><p>4、</p>
<pre><code>initialVelocity:

初始速率，动画视图的初始速度大小

速率为正数时，速度方向与运动方向一致，速率为负数时，速度方向与运动方向相反
</code></pre><p>5、</p>
<pre><code>CASpringAnimation * springAnimation = [CASpringAnimation animationWithKeyPath:@&quot;position&quot;];
springAnimation.damping = damping;
springAnimation.stiffness = stiffness;
springAnimation.mass = mass;
springAnimation.initialVelocity = initialVelocity;
springAnimation.toValue = [NSValue valueWithCGSize:CGSizeMake(self.redView.layer.position.x, self.redView.layer.position.y + 200)];
springAnimation.duration = springAnimation.settlingDuration;
[self.redView.layer addAnimation:springAnimation forKey:springAnimation.keyPath];
</code></pre><p>6、</p>
<pre><code> [UIView animateWithDuration:5 delay:0 usingSpringWithDamping:0.3 initialSpringVelocity:10 options:UIViewAnimationOptionTransitionFlipFromRight animations:^{
        CGPoint point =self.redView.center;
        point.y += 150;
        [self.redView setCenter:point];
    } completion:^(BOOL finished) {
        [self.redView setCenter:CGPointMake(250 + 49, 250 + 49)];
        [self.redView setBackgroundColor:[UIColor redColor]];
    }];
}     
      duration: 动画时长
      delay: 动画延迟
      damping: 弹簧效果
      springVelocity: 初始速度
      options: 过度效果
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome: &lt;a href=&quot;https://github.com/princeSmall/Full-animation-details&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;g
    
    </summary>
    
      <category term="Animation" scheme="http://yoursite.com/categories/Animation/"/>
    
    
      <category term="6" scheme="http://yoursite.com/tags/6/"/>
    
  </entry>
  
  <entry>
    <title>[Animation_BasicAnimation]</title>
    <link href="http://yoursite.com/2017/11/15/Animation-BasicAnimation/"/>
    <id>http://yoursite.com/2017/11/15/Animation-BasicAnimation/</id>
    <published>2017-11-15T06:10:33.000Z</published>
    <updated>2017-11-23T04:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome: <a href="https://github.com/princeSmall/Full-animation-details" target="_blank" rel="noopener">github地址</a></p>
<p>由于下班的时候出了事故，导致卧病休息了一个月左右，天天根本没时间更新博客，觉得没有记录就没有进步，很难过。好歹前段时间完成了公司的任务，现在有时间整理点东西。关于Animation明天会陆续整理出来，今天就是最简单的BasicAnimation。</p>
<h3 id="BasicAnimation"><a href="#BasicAnimation" class="headerlink" title="BasicAnimation"></a>BasicAnimation</h3><p><img src="/2017/11/15/Animation-BasicAnimation/Animation.gif" alt="animation"></p>
<p>1、keyPath</p>
<pre><code>rotation 旋轉

scale 缩放

translation 平移

CGPoint Key Paths : (example)position.x 位移

CGRect Key Paths : (example)bounds.size.width 伸缩

origin 原点

size 大小

opacity 透明度

backgroundColor  背景 颜色

contents  内容

Shadow Key Path: 阴影
</code></pre><p>2、</p>
<pre><code>duration：动画的持续时间
</code></pre><p>3、<br>　　<pre>repeatCount：动画的重复次数</pre></p>
<p>4、<br>　　<pre>timingFunction：动画的时间节奏控制</pre></p>
<p>5、Use</p>
<pre><code>    case 0:
        animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation.x&quot;];
        //setFromValue不设置,默认以当前状态为准
        [animation setToValue:@(2 * M_PI)];
        break;
    case 1:
        animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation.y&quot;];
        //setFromValue不设置,默认以当前状态为准
        [animation setToValue:@(2 * M_PI)];
        break;
    case 2:
        animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation.z&quot;];
        //setFromValue不设置,默认以当前状态为准
        [animation setToValue:@(2 * M_PI)];
        break;
    case 3:
        //平移
        animation = [CABasicAnimation animationWithKeyPath:@&quot;position&quot;];
        //setFromValue不设置,默认以当前状态为准
        [animation setToValue:[NSValue valueWithCGPoint:CGPointMake(self.redView.center.x, self.redView.center.y + 200)]];
        break;
    case 4:
        animation = [CABasicAnimation animationWithKeyPath:@&quot;opacity&quot;];
        [animation setFromValue:@1.0];
        [animation setToValue:@0.1];
        break;
    case 5:
        animation = [CABasicAnimation animationWithKeyPath:@&quot;backgroundColor&quot;];
        animation.fromValue = (__bridge id _Nullable)([UIColor redColor].CGColor);
        animation.toValue = (__bridge id _Nullable)([UIColor greenColor].CGColor);

        break;
    case 6:
        animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.scale&quot;];
        [animation setFromValue:@1.0];
        [animation setToValue:@0.1];
        break;
    case 7:
        animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.scale.x&quot;];
        [animation setFromValue:@1.0];
        [animation setToValue:@0.1];
        break;
    case 8:
        animation = [CABasicAnimation animationWithKeyPath:@&quot;transform.scale.y&quot;];
        [animation setFromValue:@1.0];
        [animation setToValue:@0.1];
        break;
    case 9:
        animation = [CABasicAnimation animationWithKeyPath:@&quot;bounds&quot;];
        [animation setToValue:[NSValue valueWithCGRect:CGRectMake(self.redView.frame.origin.x, self.redView.frame.origin.y, 200, 200)]];
        break;

    default:
        break;
}
[animation setDelegate:self];//代理回调
[animation setDuration:1];//设置动画时间，单次动画时间
[animation setRemovedOnCompletion:NO];//默认为YES,设置为NO时setFillMode有效
[animation setTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut]];
[animation setAutoreverses:YES];
[animation setFillMode:kCAFillModeBoth];
[self.redView.layer addAnimation:animation forKey:@&quot;basicAnimation&quot;];
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome: &lt;a href=&quot;https://github.com/princeSmall/Full-animation-details&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;g
    
    </summary>
    
      <category term="Animation" scheme="http://yoursite.com/categories/Animation/"/>
    
    
      <category term="6" scheme="http://yoursite.com/tags/6/"/>
    
  </entry>
  
  <entry>
    <title>[iOS_零碎知识点整理]</title>
    <link href="http://yoursite.com/2017/09/30/iOS-%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/09/30/iOS-零碎知识点整理/</id>
    <published>2017-09-30T07:54:23.000Z</published>
    <updated>2017-11-24T08:12:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>明天就十一，项目也告一段路，今天就把以前的零碎知识点整理下，备忘录好几页找都不好找了</p>
<h3 id="iOS中属性-property的常用关键字"><a href="#iOS中属性-property的常用关键字" class="headerlink" title="iOS中属性@property的常用关键字"></a>iOS中属性@property的常用关键字</h3><p>strong，weak，assign，copy，nonatomic，retain ，atomic….</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>解析</th>
</tr>
</thead>
<tbody>
<tr>
<td>strong</td>
<td>释放旧对象，将旧对象的值赋予输入对象，输入对象的索引计数加1</td>
</tr>
<tr>
<td>weak</td>
<td>不增加引用计数，不持有对象，因此也不能决定对象释放</td>
</tr>
<tr>
<td>assign</td>
<td>适用于基础数据类型（NSInteger CGFloat…），不增加引用计数</td>
</tr>
<tr>
<td>copy</td>
<td>建立一个索引计数为1 的对象然后释放旧对象，此属性只对那些实行了NSCopying协议的对象类型有效（NSString , Block）</td>
</tr>
<tr>
<td>nonatomic</td>
<td>非原子性访问对于属性赋值的时候不加锁，多线程并发访问会提高性能，如果不加此属性则默认是两个访问方法都为原子型事务访问</td>
</tr>
<tr>
<td>retain</td>
<td>对象的引用计数+1。ARC下已经不再使用此关键字，用strong代替</td>
</tr>
<tr>
<td>atomic</td>
<td>和 nonatomic用来决定编译器生成的getter和setter是否为原子操作，atomic设置成员变量的@property属性时  默认为是atomic 提供线程安全</td>
</tr>
<tr>
<td>unsafe_unretained</td>
<td>跟weak类似，声明一个弱引用，但是当引用计数为0时，变量不会自动设置为nil</td>
</tr>
</tbody>
</table>
<h4 id="ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？"><a href="#ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？" class="headerlink" title="ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？"></a>ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？</h4><p>strong, atomic, readwrite</p>
<h4 id="copy-和-strong"><a href="#copy-和-strong" class="headerlink" title="copy 和 strong"></a>copy 和 strong</h4><p>（1）因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.<br>（2）如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性</p>
<h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p>Class 是一个 objc_class 结构类型的指针；而 id（任意对象） 是一个 objc_object 结构类型的指针<br>struct objc_class</p>
<pre>
{
    struct objc_class* isa;
    struct objc_class* super_class;
    const char* name;
    long version;
    long info;
    long instance_size;
    struct objc_ivar_list* ivars;
    struct objc_method_list** methodLists;
    struct objc_cache* cache;
    struct objc_protocol_list* protocols;
};
</pre>

<ol>
<li><p>（1）isa：对象的isa指向类（class），类的isa指向元类（meta class），元类isa指向元类的根类（root meteClass）。isa 帮助一个对象找到它的方法</p>
</li>
<li><p>（2）super_class：指向该类的父类！如果该类已经是最顶层的根类，如 NSObject 或 NSProxy），那么 super_class 就为 NULL。</p>
</li>
<li><p>（3）name：一个 C 字符串，指示类的名称。</p>
</li>
<li><p>（4）version：类的版本信息，默认初始化为 0。我们可以在运行期对其进行修改（class_setVersion）或获取</p>
</li>
<li>（5）info：供运行期使用的一些位标识。有如下一些位掩码：<br>CLS_CLASS (0x1L) 表示该类为普通 class ，其中包含实例方法和变量；<br>CLS_META (0x2L) 表示该类为 metaclass，其中包含类方法；<br>CLS_INITIALIZED (0x4L) 表示该类已经被运行期初始化了，这个标识位只被 objc_addClass 所设置；<br>CLS_POSING (0x8L) 表示该类被 pose 成其他的类；（poseclass 在ObjC 2.0中被废弃了）；<br>CLS_MAPPED (0x10L) 为ObjC运行期所使用<br>CLS_FLUSH_CACHE (0x20L) 为ObjC运行期所使用<br>CLS_GROW_CACHE (0x40L) 为ObjC运行期所使用<br>CLS_NEED_BIND (0x80L) 为ObjC运行期所使用<br>CLS_METHOD_ARRAY (0x100L) 该标志位指示 methodlists 是指向一个 objc_method_list 还是一个包含 objc_method_list 指针的数组；</li>
<li>（6）instance_size：该类的实例变量大小（包括从父类继承下来的实例变量）。</li>
<li>（7）ivars：指向 objc_ivar_list 的指针，存储每个实例变量的内存地址，如果该类没有任何实例变量则为 NULL；</li>
<li>（8）methodLists：与 info 的一些标志位有关，CLS_METHOD_ARRAY 标识位决定其指向的东西（是指向单个 objc_method_list还是一个 objc_method_list 指针数组），如果 info 设置了 CLS_CLASS 则 objc_method_list  存储实例方法，如果设置的是 CLS_META 则存储类方法；</li>
<li>（9）cache：指向 objc_cache 的指针，用来缓存最近使用的方法，以提高效率。</li>
<li>（10）protocols：指向 objc_protocol_list 的指针，存储该类声明要遵守的正式协议。</li>
</ol>
<h4 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h4><p>IMP本质上就是一个函数指针，指向方法的实现，在objc.h找到它的定义<br>typedef void (<em>IMP)(void /</em> id, SEL, … */ );</p>
<p>#else<br>typedef id (*IMP)(id, SEL, …);</p>
<p>#endif</p>
<h4 id="objc-msgSend"><a href="#objc-msgSend" class="headerlink" title="objc_msgSend"></a>objc_msgSend</h4><p>objc_msgSend它具体是如何发送消息：<br>首先根据receiver对象的isa指针获取它对应的class；<br>优先在class的cache查找message方法，如果找不到，再到methodLists查找；<br>如果没有在class找到，再到super_class查找；<br>一旦找到message这个方法，就执行它实现的IMP。<br>注：当objc_msgSend找不到实现的IMP时，程序并不会直接崩溃，而是给开发者一个plan b：方法决议与消息转发</p>
<h3 id="iOS的一些小技巧"><a href="#iOS的一些小技巧" class="headerlink" title="iOS的一些小技巧"></a>iOS的一些小技巧</h3><h4 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h4><ol>
<li><p>设置UILable行间距</p>
<pre><code>NSMutableAttributedString* attrString = [[NSMutableAttributedString  alloc] initWithString:label.text];

NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];

[style setLineSpacing:20];

[attrString addAttribute:NSParagraphStyleAttributeName value:style range:NSMakeRange(0, label.text.length)];

label.attributedText = attrString;
</code></pre></li>
<li><p>UILabel显示不同颜色字体</p>
<pre><code>NSMutableAttributedString * string = [[NSMutableAttributedString alloc] initWithString:label.text];

[string addAttribute:NSForegroundColorAttributeName value:[UIColor redColor] range:NSMakeRange(0,5)];

[string addAttribute:NSForegroundColorAttributeName value:[UIColor greenColor] range:NSMakeRange(5,6)];

[string addAttribute:NSForegroundColorAttributeName value:[UIColor blueColor] range:NSMakeRange(11,5)];

label.attributedText = string;
</code></pre></li>
<li><p>动画修改label上的文字</p>
<pre><code>方法一
CATransition * animation = [CATransition animation];
animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
animation.type = kCATransitionFade;
animation.duration = 0.75;
[self.label.layer addAnimation:animation forKey:@&quot;kCATransitionFade&quot;];
self.label.text = @&quot;New&quot;;

方法二
[UIView transitionWithView:self.label
              duration:0.25f
               options:UIViewAnimationOptionTransitionCrossDissolve
            animations:^{
                self.label.text = @&quot;Well done!&quot;;
            } completion:nil];

 方法三
 [UIView animateWithDuration:1.0
             animations:^{
                 self.label.alpha = 0.0f;
                 self.label.text = @&quot;newText&quot;;
                 self.label.alpha = 1.0f;
             }];
</code></pre></li>
</ol>
<ol start="4">
<li><p>播放一张张连续的图片</p>
<pre><code>加入现在有三张图片分别为animate_1、animate_2、animate_3
方法一：
imageView.animationImages = @[[UIImage imageNamed:@&quot;animate_1&quot;], [UIImage imageNamed:@&quot;animate_2&quot;], [UIImage imageNamed:@&quot;animate_3&quot;]];
imageView.animationDuration = 1.0;
方法二：
imageView.image = [UIImage animatedImageNamed:@&quot;animate_&quot; duration:1.0];
方法二解释下：
这个方法会加载animate_为前缀的，后边0-1024，也就是animate_0、animate_1一直到animate_1024
</code></pre></li>
<li><p>修改UISearBar内部背景颜色</p>
<pre><code>UITextField *textField = [_searchBar valueForKey:@&quot;_searchField&quot;];
textField.backgroundColor = [UIColor redColor];
</code></pre></li>
<li><p>监听UISlider拖动状态</p>
<pre><code>[slider addTarget:self action:@selector(sliderValurChanged:forEvent:) forControlEvents:UIControlEventValueChanged];

 - (void)sliderValurChanged:(UISlider*)slider forEvent:(UIEvent*)event {
   UITouch *touchEvent = [[event allTouches] anyObject];
   switch (touchEvent.phase) {
       case UITouchPhaseBegan:
            NSLog(@&quot;开始拖动&quot;);
            break;
       case UITouchPhaseMoved:
            NSLog(@&quot;正在拖动&quot;);
            break;
       case UITouchPhaseEnded:
            NSLog(@&quot;结束拖动&quot;);
            break;
       default:
            break;
      }
  }
</code></pre></li>
</ol>
<h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><ol>
<li><p>MD5加密</p>
<pre><code>+ (NSString *)md5:(NSString *)str
{
   const char *concat_str = [str UTF8String];
   unsigned char result[CC_MD5_DIGEST_LENGTH];
   CC_MD5(concat_str, (unsigned int)strlen(concat_str), result);
   NSMutableString *hash = [NSMutableString string];
   for (int i =0; i&lt;16; i++){
      [hash appendFormat:@&quot;X&quot;, result[i]];
   }
   return [hash uppercaseString];
}
</code></pre></li>
<li><p>base64加密       </p>
<pre><code>@interface NSData (Base64)
/**
 *  @brief  字符串base64后转data
 */
+ (NSData *)dataWithBase64EncodedString:(NSString *)string
{
  if (![string length]) return nil;
  NSData *decoded = nil;
#if __MAC_OS_X_VERSION_MIN_REQUIRED &lt; __MAC_10_9 || __IPHONE_OS_VERSION_MIN_REQUIRED &lt; __IPHONE_7_0
 if (![NSData instancesRespondToSelector:@selector(initWithBase64EncodedString:options:)])
 {
#pragma clang diagnostic push
#pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;
decoded = [[self alloc] initWithBase64Encoding:[string stringByReplacingOccurrencesOfString:@&quot;[^A-Za-z0-9+/=]&quot; withString:@&quot;&quot; options:NSRegularExpressionSearch range:NSMakeRange(0, [string length])]];
#pragma clang diagnostic pop
 }
else
#endif
{
decoded = [[self alloc] initWithBase64EncodedString:string options:NSDataBase64DecodingIgnoreUnknownCharacters];
}
return [decoded length]? decoded: nil;
}
/**
  *  @brief  NSData转string
  *  @param wrapWidth 换行长度  76  64
  */
- (NSString *)base64EncodedStringWithWrapWidth:(NSUInteger)wrapWidth
{
   if (![self length]) return nil;
   NSString *encoded = nil;
  #if __MAC_OS_X_VERSION_MIN_REQUIRED &lt; __MAC_10_9 || __IPHONE_OS_VERSION_MIN_REQUIRED &lt; __IPHONE_7_0
   if (![NSData instancesRespondToSelector:@selector(base64EncodedStringWithOptions:)])
   {
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;
encoded = [self base64Encoding];
#pragma clang diagnostic pop

 }
else
#endif
{
switch (wrapWidth)
{
    case 64:
    {
        return [self base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
    }
    case 76:
    {
        return [self base64EncodedStringWithOptions:NSDataBase64Encoding76CharacterLineLength];
    }
    default:
    {
        encoded = [self base64EncodedStringWithOptions:(NSDataBase64EncodingOptions)0];
    }
}
 }
if (!wrapWidth || wrapWidth &gt;= [encoded length])
{
   return encoded;
 }
 wrapWidth = (wrapWidth / 4) * 4;
 NSMutableString *result = [NSMutableString string];
   for (NSUInteger i = 0; i &lt; [encoded length]; i+= wrapWidth)
 {
if (i + wrapWidth &gt;= [encoded length])
{
    [result appendString:[encoded substringFromIndex:i]];
    break;
}
[result appendString:[encoded substringWithRange:NSMakeRange(i, wrapWidth)]];
[result appendString:@&quot;\r\n&quot;];
  }
  return result;
 }
/**
  *  @brief  NSData转string 换行长度默认64
  */
 - (NSString *)base64EncodedString
 {
      return [self base64EncodedStringWithWrapWidth:0];
 }
</code></pre></li>
<li><p>3DES加密</p>
<pre><code>#import
@interface NSData (3DES)
/**
  *  利用3DES加密数据
  */
- (NSData*)encryptedWith3DESUsingKey:(NSString*)key andIV:(NSData*)iv {

      NSData *keyData = [key dataUsingEncoding:NSUTF8StringEncoding];

      size_t dataMoved;
      NSMutableData *encryptedData = [NSMutableData dataWithLength:self.length + kCCBlockSize3DES];

      CCCryptorStatus result = CCCrypt(kCCEncrypt,kCCAlgorithm3DES,kCCOptionPKCS7Padding,keyData.bytes,keyData.length,iv.bytes,self.bytes,self.length,encryptedData.mutableBytes,encryptedData.length,&amp;dataMoved);

     if (result == kCCSuccess) {
encryptedData.length = dataMoved;
return encryptedData;
        }

    return nil;

 }
/**
  *  @brief   利用3DES解密数据
  */
- (NSData*)decryptedWith3DESUsingKey:(NSString*)key andIV:(NSData*)iv {

   NSData *keyData = [key dataUsingEncoding:NSUTF8StringEncoding];

  size_t dataMoved;
  NSMutableData *decryptedData = [NSMutableData dataWithLength:self.length + kCCBlockSize3DES];

  CCCryptorStatus result = CCCrypt(kCCDecrypt,kCCAlgorithm3DES,kCCOptionPKCS7Padding,keyData.bytes,keyData.length,iv.bytes,self.bytes,self.length,decryptedData.mutableBytes,decryptedData.length,&amp;dataMoved);

 if (result == kCCSuccess) {
      decryptedData.length = dataMoved;
      return decryptedData;
    }

   return nil;

}
</code></pre></li>
</ol>
<h4 id="零碎知识点"><a href="#零碎知识点" class="headerlink" title="零碎知识点"></a>零碎知识点</h4><ol>
<li><p>页面跳转实现翻转动画</p>
<pre><code>modal方式
TestViewController *vc = [[TestViewController alloc] init];
vc.view.backgroundColor = [UIColor redColor];
vc.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
[self presentViewController:vc animated:YES completion:nil];

push方式:
TestViewController *vc = [[TestViewController alloc] init];
vc.view.backgroundColor = [UIColor redColor];
[UIView beginAnimations:@&quot;View Flip&quot; context:nil];
[UIView setAnimationDuration:0.80];
[UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
[UIView setAnimationTransition:UIViewAnimationTransitionFlipFromRight forView:self.navigationController.view cache:NO];
[self.navigationController pushViewController:vc animated:YES];
[UIView commitAnimations];
</code></pre></li>
<li><p>多网络请求：</p>
<pre><code>dispatch_group_t group = dispatch_group_create();
dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.wzb.test.www&quot;, DISPATCH_QUEUE_SERIAL);
dispatch_group_enter(group);
dispatch_group_async(group, serialQueue, ^{
// 网络请求一
[WebClick getDataSuccess:^(ResponseModel *model) {
    dispatch_group_leave(group);
} failure:^(NSString *err) {
    dispatch_group_leave(group);
}];
});
dispatch_group_enter(group);
  dispatch_group_async(group, serialQueue, ^{
// 网络请求二
[WebClick getDataSuccess:getBigTypeRM onSuccess:^(ResponseModel *model) {
    dispatch_group_leave(group);
}                                  failure:^(NSString *errorString) {
    dispatch_group_leave(group);
}];
});
dispatch_group_enter(group);
dispatch_group_async(group, serialQueue, ^{
// 网络请求三
[WebClick getDataSuccess:^{
    dispatch_group_leave(group);
} failure:^(NSString *errorString) {
    dispatch_group_leave(group);
}];
});

// 所有网络请求结束后会来到这个方法
dispatch_group_notify(group, serialQueue, ^{
dispatch_async(dispatch_get_global_queue(0, 0), ^{
    dispatch_async(dispatch_get_main_queue(), ^{
        // 刷新UI
    });
});
});
</code></pre></li>
<li><p>监听scrollView是否滚动到了顶部／底部</p>
<pre><code>-(void)scrollViewDidScroll: (UIScrollView*)scrollView
 {
   float scrollViewHeight = scrollView.frame.size.height;
   float scrollContentSizeHeight = scrollView.contentSize.height;
   float scrollOffset = scrollView.contentOffset.y;

   if (scrollOffset == 0)
    {
// 滚动到了顶部
    }
   else if (scrollOffset + scrollViewHeight ==  scrollContentSizeHeight)
    {
// 滚动到了底部
    }
  }
</code></pre></li>
<li><p>过滤空格</p>
</li>
</ol>
<pre><code>-(NSString *)userName:(NSString *)name{

name = [name stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];//前后空格

name = [name stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];//中间空格
return name;
}
</code></pre><ol start="5">
<li><p>获取邮箱用户部分和域名部分</p>
<pre><code>- (BOOL)validateEmail:(NSString *)email {
    if ((0 != [email rangeOfString:@&quot;@&quot;].length) &amp;&amp;
        (0 != [email rangeOfString:@&quot;.&quot;].length)) {
         NSCharacterSet *tmpInvalidCharSet =
[[NSCharacterSet alphanumericCharacterSet] invertedSet];
        NSMutableCharacterSet *tmpInvalidMutableCharSet =
[tmpInvalidCharSet mutableCopy];
        [tmpInvalidMutableCharSet removeCharactersInString:@&quot;_-&quot;];

         NSRange range1 = [email rangeOfString:@&quot;@&quot; options:NSCaseInsensitiveSearch];

//取得用户名部分
NSString *userNameString = [email substringToIndex:range1.location];
NSLog(@&quot;length---%ld&quot;,userNameString.length);
if (userNameString.length &lt; 1 || userNameString.length &gt; 20) {
    return NO;
}else
//取得域名部分
NSString *domainString = [email substringFromIndex:range1.location + 1];
NSArray *domainArray = [domainString componentsSeparatedByString:@&quot;.&quot;];

for (NSString *string in domainArray) {
    NSRange rangeOfInavlidChars =
    [string rangeOfCharacterFromSet:tmpInvalidMutableCharSet];
    if (rangeOfInavlidChars.length != 0 || [string isEqualToString:@&quot;&quot;])
        return NO;
}

return YES;
} else {
return NO;
       }
}
</code></pre></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;明天就十一，项目也告一段路，今天就把以前的零碎知识点整理下，备忘录好几页找都不好找了&lt;/p&gt;
&lt;h3 id=&quot;iOS中属性-property的常用关键字&quot;&gt;&lt;a href=&quot;#iOS中属性-propert
    
    </summary>
    
      <category term="OC" scheme="http://yoursite.com/categories/OC/"/>
    
    
      <category term="5" scheme="http://yoursite.com/tags/5/"/>
    
  </entry>
  
  <entry>
    <title>[iOS_正则表达式]</title>
    <link href="http://yoursite.com/2017/09/25/iOS-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/09/25/iOS-正则表达式/</id>
    <published>2017-09-25T07:17:23.000Z</published>
    <updated>2017-11-24T08:12:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>新的项目用户名、邮箱和密码等要用到正则，所以就把以前整理的拿出来用了，不要太方便，索性就打个flag吧。嗯，我以前笔记做的还是比较清楚的</p>
<p>  正则表达式记录表</p>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><pre><code>1、 \b : 单词的开始或结束

2、 .* : 任意数量的不包含换行的字符
    .  : 匹配除换行符以外的任意字符 

3、 \d : 是新的元字符，匹配一位数字
  \d{n} : 必须连续重复匹配n次

4、 \s : 匹配任意的空白符（空格，制表格，换行符，中文全角空格等）

5、 \w : 匹配字母或者数字或者下划线或者汉字等

6、  ^  : 匹配字符串的开始
    ￥  : 匹配字符串的结束
</code></pre><p> 注意：</p>
<pre><code>* 字符转义

如果你想查找元字符本身，比如.和* ，这时候你就应该使用\.和\*
</code></pre><h4 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h4><pre><code>    代码       |     说明      
------------- | -------------
   *          |   重复零次或更多次
   +          |   重复一次或更多次
   ?          |   重复零次或一次
   {n}        |   重复n次
   {n,}       |   重复n次或更多次
   {n,m}      |   重复n到m次
</code></pre><p>注意：</p>
<pre><code>*字符类

如果想匹配没有预定义的元字符集合，比如a，e，o。这时候你就要[aeo]就匹配任何一个英文元音的字母。[.?!]匹配任意一个标点符号
</code></pre><h3 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h3><ol>
<li><p>满足任意一种规则都应该当成匹配，用 | 把不同的规则分割开来</p>
<pre><code>0\d{2}-\d{8}|0\d{3}-\d{7} 这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)

 \(0\d{2}\)[- ]?\d{8}|0\d{2}[- ]?\d{8}这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔
</code></pre></li>
<li><p>使用分枝条件时，要注意个分枝的顺序</p>
<pre><code>\d{5}-\d{4}|\d{5} 换成 \d{5}|\d{5}-\d{4}，那么就只会匹配5位的邮编。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了
</code></pre></li>
<li><p>重复多个字符，使用分组</p>
<pre><code>(\d{1,3}\.){3}\d{1,3}是一个简单的IP地址匹配表达式

(\d{1,3}\.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})

不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址

((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。解析正确IP：01-09,0-255
1. 2[0-4]\d :（200-249)
2. 25[0-5] :(250-255)
3. [01]?\d\d? : (01-09,0-199)
</code></pre></li>
</ol>
<h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><pre><code>   代码        |语法
--------------|-------------------      
    \W        |匹配任意不是字母，数字，下划线，汉字的字符
    \S        |匹配任意不是空白符的字符
    \D        |匹配任意非数字的字符
    \B        |匹配不是单词开头或结束的位置
    [^x]      |匹配除了x以外的任意字符
    [^aeiou]  |匹配除了aeiou这几个字母以外的任意字符

例如： 

 \S+匹配不包含空白符的字符串。

 &lt;a[^&gt;]+&gt;匹配用尖括号括起来的以a开头的字符串
</code></pre><h3 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h3><p>常用分组语法</p>
<pre><code>       分类 |代码/语法     |说明
-----------|-------------|-----------------
  捕获      |  (exp)      |匹配exp,并捕获文本到自动命名的组里
           | (?&lt;name&gt;exp |匹配exp,并捕获文本到名称为name的组里，也可以写成(?&apos;name&apos;exp)
           |  (?:exp)    |匹配exp,不捕获匹配的文本，也不给此分组分配组号
  零宽断言  |   (?=exp)   |   匹配exp前面的位置                 
           |   (?&lt;=exp)  |匹配exp后面的位置
           |   (?!exp)   |匹配后面跟的不是exp的位置
           | (?&lt;!exp)    |匹配前面不是exp的位置
 注释      | (?#comment)  |这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读
</code></pre><p>注意：</p>
<pre><code>分组0对应整个正则表达式
实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号
你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权
</code></pre><p>例如：</p>
<pre><code>\b(\w+)\b\s+\1\b可以用来匹配重复的单词：html  html
</code></pre><h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><pre><code>          &lt;?!w+&gt; ?&lt;!w+

  \b\w*q[^u]\w*\b匹配包含后面不是字母u的字母q的单词。

  你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w*\b将会匹配下一个单词，于是\b\w*q[^u]\w*\b就能匹配整个Iraq fighting

  负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w*q(?!u)\w*\b

例如

\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。

(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。

(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)匹配不包含属性的简单HTML标签内里的内容：被尖括号括起来的单词(比如可能是&lt;b&gt;)，然后是.*(任意的字符串),最后是一个后缀(?=&lt;\/\1&gt;)。注意后缀里的\/，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是&lt;b&gt;的话，后缀就是&lt;/b&gt;了。整个表达式匹配的是&lt;b&gt;和&lt;/b&gt;之间的内容(再次提醒，不包括前缀和后缀本身)
</code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre><code>    代码          |语法
------------------|-----------------
      (?&lt;=        |# 断言要匹配的文本的前缀
      &lt;(\w+)&gt;     |# 查找尖括号括起来的字母或数字(即HTML/XML标签)
      (           |  # 前缀结束
      .*          |  # 匹配任意文本
      (?=         | # 断言要匹配的文本的后缀
     &lt;\ / \1&gt;     |# 查找尖括号括起来的内容：前面是一个&quot;/&quot;，后面是先前捕获的标签
       )          | # 后缀结束

例如：
2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)。
</code></pre><h3 id="贪婪和懒惰"><a href="#贪婪和懒惰" class="headerlink" title="贪婪和懒惰"></a>贪婪和懒惰</h3><ol>
<li><p>a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。它会匹配整个字符串aabab。这被称为贪婪匹配  </p>
</li>
<li><p>a.*?b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，匹配任意数量的重复，(但是在能使整个匹配成功的前提下)使用最少的重复,会匹配aab和ab。这被称为懒惰匹配</p>
<p>注意：</p>
<pre><code>为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？
简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：
最先开始的匹配拥有最高的优先权
</code></pre></li>
<li><p>懒惰限定符</p>
<pre><code> 代码          |说明
-----------------|------------------------
  *？            |重复任意次，但尽可能少重复
  +？            |重复1次或更多次，但尽可能少重复
 ？？            |重复0次或1次，但尽可能少重复
 {n,m}?         |重复n到m次，但尽可能少重复
 {n,}?          |重复n次以上，但尽可能少重复 
</code></pre></li>
</ol>
<h3 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h3><p>注意:</p>
<pre><code>Regex regex = new Regex(@&quot;\ba\w{6}\b&quot;, RegexOptions.IgnoreCase);
</code></pre><p>常用的处理选项</p>
<pre><code>            名称            |说明
---------------------------|--------------------------------
  IgnoreCase               |匹配时不区分大小写
  Multiline                |更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)
  Singleline               |更改.的含义，使它与每一个字符匹配（包括换行符\n）
  IgnorePatternWhitespace  |忽略表达式中的非转义空白并启用由#标记的注释。
  ExplicitCapture          | 仅捕获已被显式命名的组。 
</code></pre><h3 id="常用事例"><a href="#常用事例" class="headerlink" title="常用事例"></a>常用事例</h3><pre><code> 说明              |正则表达式     
 -----------------|----------------------------          
网址(url)         |[a-zA-z]+://[^\s]*
IP地址            |((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)
电子邮件(email)    |\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
QQ号码            | [1-9]\d{4,}
HTML标签          |&lt;(.*)(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;
密码(有数字/大写字母/小写字母/标点，8位以上) |(?=^.{8,}$)(?=.*\d)(?=.*\W+)(?=.*[A-Z])(?=.*[a-z])(?!.*\n).*$
日期              |(\d{4}|\d{2})-((1[0-2])|(0?[1-9]))-(([12][0-9])|(3[01])|(0?[1-9]))
汉字              |[\u4e00-\u9fa5]
中文及全角标点符号  |[\u3000-\u301e\ufe10-\ufe19\ufe30-\ufe44\ufe50-\ufe6b\uff01-\uffee]
</code></pre><p>注意：</p>
<pre><code>ios 开发使用 RegexKit.framework 框架 
</code></pre><p>使用规则：</p>
<pre><code> 昵称验证：(4-8)位汉字    
 + (BOOL) validateNickname:(NSString *)nickname
{
    NSString *nicknameRegex = @&quot;^[\u4e00-\u9fa5]{4,8}$&quot;;

    NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,nicknameRegex];

    return [passWordPredicate evaluateWithObject:nickname];
}

密码验证：(6-20)位英文不分大小写和数字
+ (BOOL) validatePassword:(NSString *)passWord
{
   NSString *passWordRegex = @&quot;^[a-zA-Z0-9]{6,20}+$&quot;;

   NSPredicate *passWordPredicate = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;,passWordRegex];

   return [passWordPredicate evaluateWithObject:passWord];
}

邮箱验证：
+ (BOOL) validateEmail:(NSString *)email
{
   NSString *emailRegex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}&quot;;

   NSPredicate *emailTest = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, emailRegex];

   return [emailTest evaluateWithObject:email];
 }   
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;新的项目用户名、邮箱和密码等要用到正则，所以就把以前整理的拿出来用了，不要太方便，索性就打个flag吧。嗯，我以前笔记做的还是比较清楚的&lt;/p&gt;
&lt;p&gt;  正则表达式记录表&lt;/p&gt;
&lt;h3 id=&quot;元字符
    
    </summary>
    
      <category term="OC" scheme="http://yoursite.com/categories/OC/"/>
    
    
      <category term="3" scheme="http://yoursite.com/tags/3/"/>
    
  </entry>
  
  <entry>
    <title>[GIT_版本库管理]</title>
    <link href="http://yoursite.com/2017/09/22/GIT-%E7%89%88%E6%9C%AC%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2017/09/22/GIT-版本库管理/</id>
    <published>2017-09-22T02:14:17.000Z</published>
    <updated>2017-09-22T07:36:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天新同事不会用git，着实让我惊讶了，还好我有做笔记的习惯。就把我A long time ago 学习整理的git给他了，上手简单，很快就会成为git 大神，啊哈哈</p>
<h3 id="Git-小技能"><a href="#Git-小技能" class="headerlink" title="Git 小技能"></a>Git 小技能</h3><p>多人开发Git版本库的管理是再好不过的了，首先你要会把远程仓库的代码clone到你的电脑里，其次建立本地你的分支，写上你的code，然后添加到暂存区，没有问题就提交到修改区。既然是同时开发，肯能你同事也修改了，那就要把他的code先从远程仓库pull下来，不管你知不知道他们是否提交，避免冲突，先pull再push。然后无误后在merge到master分支，一切一气呵成。</p>
<h4 id="远程仓库管理"><a href="#远程仓库管理" class="headerlink" title="远程仓库管理"></a>远程仓库管理</h4><ol>
<li>先克隆代码到桌面吧，这克隆的是master分支代码<pre>
cd desktop
git clone (远程仓库地址)
</pre></li>
<li>如果你想克隆远程别的分支代码<pre>
git checkout -b (分支名) origin/(远程分支名)
git checkout —track origin/(远程分支名)
</pre></li>
<li>添加远程仓库<pre>
git remote add origin (远程仓库地址)：
</pre></li>
<li>删除远程仓库<pre>
git remote remove origin (远程仓库地址)
</pre></li>
<li>显示远程分支<pre>
git remote show origin
</pre>

</li>
</ol>
<h4 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h4><ol>
<li>代码添加到暂存区<pre>
git add (文件名)：添加某个文件
git add . : 添加所有文件
git add -A : 添加所有文件夹和文件
</pre></li>
<li>代码添加到当前分支<pre>
git commit -m "提交描述"
</pre></li>
<li>拉取远程代码<pre>
git pull origin (远程分支)
</pre></li>
<li>同步本地代码<pre>
git push origin (远程分支)
</pre>

</li>
</ol>
<h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><ol>
<li>查看当前分支<pre>
git branch
</pre></li>
<li>创建新的分支<pre>
git checkout -b newBranch
</pre></li>
<li>删除旧的分支<pre>
git checkout -d newBranch
</pre></li>
<li>合并分支<pre>
git merge (要合并的分支)
</pre>

</li>
</ol>
<h4 id="提交管理"><a href="#提交管理" class="headerlink" title="提交管理"></a>提交管理</h4><ol>
<li>找到历史提交的commit id<pre>
git log —pretty=oneline —abbrev-commit
</pre></li>
<li>取消暂存<pre>
git reset HEAD 文件名
</pre></li>
<li>放弃当前修改<pre>
git checkout  -- (文件名)：（放弃当前文件修改）
git checkout . :(放弃当前所有修改)
</pre></li>
<li>恢复commit_id对应的版本<pre>
git reset --hard commit_id
</pre>

</li>
</ol>
<h4 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h4><ol>
<li>查看标签<pre>
git tag
</pre></li>
<li>查看标签信息<pre>
git show v1.0
</pre></li>
<li>创建标签<pre>
git tag v1.0  : 创建1.0标签
git tag v2.0 (commit_id): 创建指定提交的标签
</pre></li>
<li>删除标签<pre>
git tag -d v1.0 :（删除1.0标签）
git push origin :refs/tags/v0.9：（删除远程0.9标签）
</pre></li>
<li>推送本地标签<pre>
git push origin v1.0 ：（推送本地标签到远程）
git push origin —tags：（推送所有本地标签到远程）
</pre>

</li>
</ol>
<p>当然没有写Git冲突处理，因为我觉得冲突太简单了，打开项目包内容，定位到冲突的地方。保留正确的code，删除多余的运行就OK。如果一些乱七八糟的冲突，当然我也遇到过但是没有记录下来，很遗憾。</p>
<h4 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h4><p><img src="/2017/09/22/GIT-版本库管理/1.jpg" alt=""><br><img src="/2017/09/22/GIT-版本库管理/2.jpg" alt=""><br><img src="/2017/09/22/GIT-版本库管理/3.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天新同事不会用git，着实让我惊讶了，还好我有做笔记的习惯。就把我A long time ago 学习整理的git给他了，上手简单，很快就会成为git 大神，啊哈哈&lt;/p&gt;
&lt;h3 id=&quot;Git-小技能&quot;&gt;&lt;a href=&quot;#Git-小技能&quot; class=&quot;header
    
    </summary>
    
      <category term="GIT" scheme="http://yoursite.com/categories/GIT/"/>
    
    
      <category term="5" scheme="http://yoursite.com/tags/5/"/>
    
  </entry>
  
  <entry>
    <title>[机器学习_CoreML_Inceptionv3]</title>
    <link href="http://yoursite.com/2017/09/21/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-CoreML-Inceptionv3/"/>
    <id>http://yoursite.com/2017/09/21/机器学习-CoreML-Inceptionv3/</id>
    <published>2017-09-21T01:15:15.000Z</published>
    <updated>2017-09-21T02:22:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome:<a href="https://github.com/princeSmall/CoreML_Inceptionv3" target="_blank" rel="noopener">github地址</a></p>
<p>一直直接用图片给.mlmodel去识别，觉得没有直接调用相机来的方便，一直看的都是swift版本的，所以想写一个oc的，立个flag。</p>
<h1 id="CoreML-Inceptionv3"><a href="#CoreML-Inceptionv3" class="headerlink" title="CoreML_Inceptionv3"></a>CoreML_Inceptionv3</h1><p><img src="/2017/09/21/机器学习-CoreML-Inceptionv3/Inceptionv3.gif" alt="Inceptionv3"></p>
<h3 id="相机调用"><a href="#相机调用" class="headerlink" title="相机调用"></a>相机调用</h3><ol>
<li>info.plist 添加调用相机请求</li>
<li>相机调用请求</li>
<li>相机数据输出的delegate</li>
</ol>
<h4 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h4><ul>
<li>摄像显示区域</li>
<li>相机调用请求</li>
<li>相机数据输出</li>
<li>线程</li>
<li>数据显示</li>
<li>InceptionvModel</li>
<li>InceptionvModel输出</li>
</ul>
<pre>
@property (nonatomic,strong) AVCaptureVideoPreviewLayer
*previewLayer; 
@property (nonatomic,strong) AVCaptureSession *session;
@property (nonatomic,strong) AVCaptureVideoDataOutput *videoOutPut;
@property (nonatomic,strong) AVCaptureConnection *videoConnection;
@property (nonatomic,strong) dispatch_queue_t videoQueue;
@property (nonatomic,strong) UILabel *resultLabel;
@property (nonatomic,strong) Inceptionv3 *InceptionvModel;
@property (nonatomic,strong) Inceptionv3Output *outPut;
</pre>

<h4 id="相机调用请求"><a href="#相机调用请求" class="headerlink" title="相机调用请求"></a>相机调用请求</h4><pre>
self.session = [[AVCaptureSession alloc] init];

    //视频
    AVCaptureDevice *videoDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
    if (videoDevice.isFocusPointOfInterestSupported && [videoDevice isFocusModeSupported:AVCaptureFocusModeContinuousAutoFocus]) {
        [videoDevice lockForConfiguration:nil];
        [videoDevice setFocusMode:AVCaptureFocusModeContinuousAutoFocus];
        [videoDevice unlockForConfiguration];
    }

    AVCaptureDeviceInput *cameraDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:videoDevice error:nil];


    if ([self.session canAddInput:cameraDeviceInput]) {
        [self.session addInput:cameraDeviceInput];
    }

    //视频
    self.videoOutPut = [[AVCaptureVideoDataOutput alloc] init];
    NSDictionary * outputSettings = [[NSDictionary alloc] initWithObjectsAndKeys:[NSNumber numberWithInt:kCVPixelFormatType_32BGRA],(id)kCVPixelBufferPixelFormatTypeKey, nil];
    [self.videoOutPut setVideoSettings:outputSettings];
    if ([self.session canAddOutput:self.videoOutPut]) {
        [self.session addOutput:self.videoOutPut];
    }
    self.videoConnection = [self.videoOutPut connectionWithMediaType:AVMediaTypeVideo];
    self.videoConnection.enabled = NO;
    [self.videoConnection setVideoOrientation:AVCaptureVideoOrientationPortrait];
</pre>

<h4 id="初始化预览层"><a href="#初始化预览层" class="headerlink" title="初始化预览层"></a>初始化预览层</h4><pre>
 self.previewLayer = [[AVCaptureVideoPreviewLayer alloc] initWithSession:self.session];
    [self.previewLayer setVideoGravity:AVLayerVideoGravityResizeAspectFill];
</pre>

<h4 id="打开相机"><a href="#打开相机" class="headerlink" title="打开相机"></a>打开相机</h4><pre>
 [self.session startRunning];
    self.videoConnection.enabled = YES;
    self.videoQueue = dispatch_queue_create("videoQueue", NULL);
    [self.videoOutPut setSampleBufferDelegate:self queue:self.videoQueue];
</pre>

<h4 id="关闭相机"><a href="#关闭相机" class="headerlink" title="关闭相机"></a>关闭相机</h4><pre>
[self.videoOutPut setSampleBufferDelegate:nil queue:nil];
    self.videoConnection.enabled = NO;
    self.videoQueue = nil;
    [self.session stopRunning];
</pre>

<h3 id="CoreML数据输出"><a href="#CoreML数据输出" class="headerlink" title="CoreML数据输出"></a>CoreML数据输出</h3><ol>
<li>获取相机数据输出的CMSampleBufferRef</li>
<li>转换成UIImage大小为299.299</li>
<li>输出为Inceptionv3Output</li>
</ol>
<h4 id="下载Inceptionv3-mlmodel"><a href="#下载Inceptionv3-mlmodel" class="headerlink" title="下载Inceptionv3.mlmodel"></a>下载Inceptionv3.mlmodel</h4><ol>
<li>target-&gt;build phases-&gt;compile sources 添加Inceptionv3.mlmodel</li>
<li>导入头文件Inceptionv3.h</li>
</ol>
<h4 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h4><pre>
-(UIImage *)image:(CGSize)resize{
    UIGraphicsBeginImageContext(resize);
    [self drawInRect:CGRectMake(0, 0, resize.width, resize.height)];
    UIImage * image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return image;
}
</pre>

<h4 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h4><pre>
-(void)imageOutput:(CMSampleBufferRef)sampleBuffer{    
    CVImageBufferRef imageBuffer = CMSampleBufferGetImageBuffer(sampleBuffer);
    CIImage * ciImage = [CIImage imageWithCVImageBuffer:imageBuffer];

    Inceptionv3Image * uiImage =[[Inceptionv3Image alloc]initWithCIImage:ciImage];
    UIImage * uiimage = [uiImage image:CGSizeMake(299, 299)];

    CGImageRef cgImage = uiimage.CGImage;
    CVPixelBufferRef pixelBuffer = [ImageConvert pixelBufferFromImage:cgImage];
    self.InceptionvModel = [[Inceptionv3 alloc]init];
    self.outPut =  [self.InceptionvModel predictionFromImage:pixelBuffer error:nil];
}
</pre>

<h4 id="在AVCaptureOutputDelegat回调方法中开启线程"><a href="#在AVCaptureOutputDelegat回调方法中开启线程" class="headerlink" title="在AVCaptureOutputDelegat回调方法中开启线程"></a>在AVCaptureOutputDelegat回调方法中开启线程</h4><ol>
<li>把相机输出的数据转换成Inceptionv3接收的数据</li>
<li>在主线程刷新界面</li>
</ol>
<pre>
dispatch_queue_t queue = dispatch_queue_create("CMSampleBufferRef", NULL);
    dispatch_sync(queue, ^{
        [self imageOutput:sampleBuffer];
        dispatch_async(dispatch_get_main_queue(), ^{
            self.resultLabel.text = self.outPut.classLabel;
        });
    });
</pre>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome:&lt;a href=&quot;https://github.com/princeSmall/CoreML_Inceptionv3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="3" scheme="http://yoursite.com/tags/3/"/>
    
  </entry>
  
  <entry>
    <title>[机器学习_CoreML_MobileNet]</title>
    <link href="http://yoursite.com/2017/09/20/Python-CoreML-MobileNet/"/>
    <id>http://yoursite.com/2017/09/20/Python-CoreML-MobileNet/</id>
    <published>2017-09-20T02:40:12.000Z</published>
    <updated>2017-09-20T09:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog. Thanks.</p>
<p>Dome:<a href="https://github.com/princeSmall/CoreML_MobileNet" target="_blank" rel="noopener">github地址</a></p>
<h1 id="CoreML-MobileNet"><a href="#CoreML-MobileNet" class="headerlink" title="CoreML_MobileNet"></a>CoreML_MobileNet</h1><p>接着上面再写一个MobileNet.mlmodel,这次这个直接拿来用。</p>
<p>GoogLeNetPlaces.mlmodel 和 Resnet50都可以识别人物和静态物体。不过这个才24M，小多了，所以就简尔处理给张特定的image，然后输出结果</p>
<p><img src="/2017/09/20/Python-CoreML-MobileNet/pool.png" alt=""></p>
<h3 id="Download-Core-ML-Model"><a href="#Download-Core-ML-Model" class="headerlink" title="Download Core ML Model"></a>Download Core ML Model</h3><p><a href="https://developer.apple.com/machine-learning/" target="_blank" rel="noopener">GoogLeNetPlaces.mlmodel下载地址</a></p>
<h3 id="导入头文件"><a href="#导入头文件" class="headerlink" title="导入头文件"></a>导入头文件</h3><pre>
 #import < CoreML/CoreML.h>
 #import < Vision/Vision.h>
 #import "GoogLeNetPlaces.h"
</pre>


<h3 id="图片识别"><a href="#图片识别" class="headerlink" title="图片识别"></a>图片识别</h3><ol>
<li><p>创建Resnet对象，加载CoreMLModel</p>
<pre>
GoogLeNetPlaces *googleModel = [[GoogLeNetPlaces alloc] init];
VNCoreMLModel * vnCoreModel = [VNCoreMLModel modelForMLModel:googleModel.model error:nil];
</pre>
</li>
<li><p>创建Vision请求，带有completion handle</p>
<pre>
VNCoreMLRequest * vnCoreMlRequest = [[VNCoreMLRequest alloc] initWithModel:vnCoreModel completionHandler:^(VNRequest * _Nonnull request, NSError * _Nullable error) {
   CGFloat confidence = 0.0f;
   VNClassificationObservation * tempClassification = nil;
   for (VNClassificationObservation *classification in request.results) {
       if (classification.confidence > confidence) {
           confidence = classification.confidence;
           tempClassification = classification;
       }
   }        
}];
</pre>
</li>
<li><p>VNClassificationObservation对象两个属性</p>
<ul>
<li>identifier：识别对象 </li>
<li>confidence：识别率</li>
</ul>
</li>
<li><p>发送图片识别请求</p>
<pre>
dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
  VNImageRequestHandler * vnImageRequestHandler = [[VNImageRequestHandler alloc] initWithCGImage:image.CGImage options:nil];   
   NSError *error = nil;
   [vnImageRequestHandler performRequests:@[vnCoreMlRequest] error:&error]; 
   if (error) {
       NSLog(@"%@",error.localizedDescription);
   }
});
</pre>
</li>
<li><p>回调在主线程更新UI</p>
<pre>
dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
       self.resultLable.text = [NSString stringWithFormat:@"识别结果:%@",tempClassification.identifier];
       self.confidenceLabel.text = [NSString stringWithFormat:@"匹配率:%@",@(tempClassification.confidence)];
   });
</pre>


</li>
</ol>
<p>多次下来是不是很简单，大同小异，只要熟悉CoreML，一切就是那么easy</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog. Thanks.&lt;/p&gt;
&lt;p&gt;Dome:&lt;a href=&quot;https://github.com/princeSmall/CoreML_MobileNet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github地址
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="3" scheme="http://yoursite.com/tags/3/"/>
    
  </entry>
  
</feed>
